import axios from "axios";
import dotenv from "dotenv";

dotenv.config();

// C·∫•u h√¨nh cho Qwen2.5 72B t·ª´ OpenRouter API
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const QWEN_MODEL_ID = "qwen/qwen2.5-72b-instruct"; // Model ID cho Qwen2.5 72B
// N·∫øu Qwen2.5 kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng model thay th·∫ø
const FALLBACK_MODEL_ID = "google/gemini-pro-1.5"; // Fallback model

// Helper function ƒë·ªÉ l√†m s·∫°ch JSON trong k·∫øt qu·∫£ t·ª´ Qwen
const cleanAndRepairJson = (text) => {
  // Tr√≠ch xu·∫•t n·ªôi dung JSON t·ª´ k·∫øt qu·∫£, b·ªè qua markdown ho·∫∑c c√°c ƒëo·∫°n vƒÉn b·∫£n kh√°c
  let jsonContent = text.trim();

  // T√¨m { ƒë·∫ßu ti√™n v√† } cu·ªëi c√πng ƒë·ªÉ tr√≠ch xu·∫•t JSON
  const firstBrace = jsonContent.indexOf("{");
  const lastBrace = jsonContent.lastIndexOf("}");

  if (firstBrace !== -1 && lastBrace !== -1) {
    jsonContent = jsonContent.substring(firstBrace, lastBrace + 1);
  }

  // Thay th·∫ø c√°c l·ªói ph·ªï bi·∫øn trong chu·ªói JSON
  jsonContent = jsonContent
    .replace(/,\s*]/g, "]") // Lo·∫°i b·ªè d·∫•u ph·∫©y tr∆∞·ªõc d·∫•u ]
    .replace(/,\s*}/g, "}") // Lo·∫°i b·ªè d·∫•u ph·∫©y tr∆∞·ªõc d·∫•u }
    .replace(/\\'/g, "'") // Chuy·ªÉn ƒë·ªïi \' th√†nh '
    .replace(/\\"/g, '\\"') // ƒê·∫£m b·∫£o d·∫•u nh√°y k√©p ƒë∆∞·ª£c escape ƒë√∫ng
    .replace(/([{,]\s*)([a-zA-Z0-9_]+)(\s*:)/g, '$1"$2"$3'); // Th√™m d·∫•u nh√°y k√©p cho keys

  return jsonContent;
};

/**
 * T·∫°o n·ªôi dung v·ªõi Qwen2.5 72B th√¥ng qua OpenRouter API
 * @param {string} prompt - Prompt ƒë·ªÉ g·ª≠i ƒë·∫øn model
 * @param {number} maxRetries - S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa khi g·∫∑p l·ªói
 * @returns {Promise<Object>} - ƒê·ªëi t∆∞·ª£ng ph·∫£n h·ªìi v·ªõi n·ªôi dung ƒë∆∞·ª£c t·∫°o ra
 */
const generateContent = async (prompt, maxRetries = 3) => {
  // N·∫øu prompt qu√° d√†i, c·∫Øt b·ªõt ƒë·ªÉ tr√°nh l·ªói
  const trimmedPrompt =
    prompt.length > 24000 ? prompt.substring(0, 24000) : prompt;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      if (!OPENROUTER_API_KEY) {
        throw new Error("OpenRouter API key is missing");
      }

      // X√°c ƒë·ªãnh model ID ƒë·ªÉ s·ª≠ d·ª•ng - th·ª≠ Qwen tr∆∞·ªõc, n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ d√πng fallback
      const modelToUse =
        attempt <= maxRetries / 2 ? QWEN_MODEL_ID : FALLBACK_MODEL_ID;

      console.log(
        `ü§ñ Generating with ${
          attempt <= maxRetries / 2 ? "Qwen2.5" : "Fallback model"
        } (attempt ${attempt})...`
      );

      const response = await axios.post(
        OPENROUTER_API_URL,
        {
          model: modelToUse,
          messages: [
            {
              role: "system",
              content:
                "B·∫°n l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ tri·∫øt h·ªçc M√°c-L√™nin, gi√∫p t·∫°o n·ªôi dung h·ªçc t·∫≠p ch·∫•t l∆∞·ª£ng cao b·∫±ng ti·∫øng Vi·ªát.",
            },
            {
              role: "user",
              content: trimmedPrompt,
            },
          ],
          max_tokens: 2000, // Gi·∫£m t·ª´ 3000 xu·ªëng 2000 ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° gi·ªõi h·∫°n
          temperature: 0.7,
          top_p: 0.9,
          stream: false,
        },
        {
          headers: {
            Authorization: `Bearer ${OPENROUTER_API_KEY}`,
            "Content-Type": "application/json",
            "HTTP-Referer":
              process.env.SITE_URL || "https://marx-edu.netlify.app",
            "X-Title":
              process.env.SITE_NAME || "Marx-Edu - Marxist Philosophy Learning",
          },
          timeout: 60000, // TƒÉng timeout l√™n 60 gi√¢y
        }
      );

      if (response.data && response.data.choices && response.data.choices[0]) {
        const content = response.data.choices[0].message.content;
        console.log(
          `‚úÖ AI generation successful with ${modelToUse} (attempt ${attempt})`
        );
        return {
          success: true,
          content: content,
          message: "Content generated successfully",
          model: modelToUse,
        };
      } else {
        throw new Error("Invalid response structure from OpenRouter API");
      }
    } catch (error) {
      console.error(
        `‚ùå Generation attempt ${attempt} failed:`,
        error.message || error
      );

      if (attempt === maxRetries) {
        throw new Error(
          `AI generation failed after ${maxRetries} attempts: ${error.message}`
        );
      }

      // Exponential backoff v·ªõi jitter - tƒÉng th·ªùi gian ch·ªù
      const delayMs = Math.min(5000, attempt * 1500 + Math.random() * 1000);
      console.log(`‚è≥ Retrying in ${delayMs}ms...`);
      await new Promise((resolve) => setTimeout(resolve, delayMs));
    }
  }
};

/**
 * T·∫°o n·ªôi dung JSON v·ªõi OpenRouter API
 */
const generateJsonContent = async (prompt) => {
  try {
    // TƒÉng c∆∞·ªùng prompt ƒë·ªÉ AI t·∫°o JSON h·ª£p l·ªá - l√†m prompt ng·∫Øn h∆°n v√† r√µ r√†ng h∆°n
    const jsonPrompt = `${prompt}

üö® CRITICAL: Return ONLY valid JSON with this exact structure:
{
  "title": "B√†i h·ªçc v·ªÅ tri·∫øt h·ªçc M√°c-L√™nin",
  "questions": [
    {
      "type": "multiple_choice",
      "content": "C√¢u h·ªèi v·ªÅ tri·∫øt h·ªçc M√°c-L√™nin?",
      "options": ["ƒê√°p √°n A", "ƒê√°p √°n B", "ƒê√°p √°n C", "ƒê√°p √°n D"],
      "correctAnswer": 0,
      "explanation": "Gi·∫£i th√≠ch ƒë√°p √°n ƒë√∫ng"
    }
  ]
}

Tu√¢n th·ªß c√°c quy t·∫Øc sau:
- B·∫Øt ƒë·∫ßu ngay b·∫±ng {, k·∫øt th√∫c b·∫±ng }
- Ch·ªâ s·ª≠ d·ª•ng d·∫•u nh√°y k√©p " cho chu·ªói
- Kh√¥ng c√≥ d·∫•u ph·∫©y ·ªü cu·ªëi c√°c ph·∫ßn t·ª≠
- Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, kh√¥ng c√≥ gi·∫£i th√≠ch ho·∫∑c markdown

GENERATE JSON NOW:`;

    console.log("üéØ Generating JSON content via OpenRouter API...");
    const response = await generateContent(jsonPrompt, 3); // TƒÉng s·ªë l·∫ßn th·ª≠ l√™n 3

    if (!response || !response.success) {
      throw new Error(response?.message || "Empty response from AI model");
    }

    const result = response.content;
    const usedModel = response.model || QWEN_MODEL_ID;

    console.log(`üîß Cleaning and parsing JSON from ${usedModel}...`);
    const cleanedJson = cleanAndRepairJson(result);

    try {
      const parsedJson = JSON.parse(cleanedJson);
      console.log(`‚úÖ JSON parsing successful from ${usedModel}`);

      // Ki·ªÉm tra c·∫•u tr√∫c JSON c√≥ ƒë√∫ng kh√¥ng
      if (
        !parsedJson.questions ||
        !Array.isArray(parsedJson.questions) ||
        parsedJson.questions.length === 0
      ) {
        throw new Error(
          "Invalid JSON structure - missing questions array or empty array"
        );
      }

      return parsedJson;
    } catch (parseError) {
      console.error("‚ùå JSON parsing error:", parseError.message);
      console.error("Raw response length:", result.length);
      console.error(
        "Cleaned JSON preview:",
        cleanedJson.substring(0, 200) + "..."
      );

      // T·∫°o JSON gi·∫£ ƒë·ªÉ tr√°nh l·ªói
      console.log("‚ö†Ô∏è Creating fallback JSON to avoid failure");
      return {
        title: "B√†i h·ªçc v·ªÅ tri·∫øt h·ªçc M√°c-L√™nin (Fallback)",
        questions: [
          {
            type: "multiple_choice",
            content:
              "Tri·∫øt h·ªçc M√°c - L√™-nin ra ƒë·ªùi trong b·ªëi c·∫£nh l·ªãch s·ª≠ n√†o?",
            options: [
              "Gi·ªØa th·∫ø k·ª∑ XIX, khi ch·ªß nghƒ©a t∆∞ b·∫£n ƒëang ph√°t tri·ªÉn m·∫°nh m·∫Ω",
              "ƒê·∫ßu th·∫ø k·ª∑ XX, sau cu·ªôc c√°ch m·∫°ng c√¥ng nghi·ªáp l·∫ßn th·ª© nh·∫•t",
              "Cu·ªëi th·∫ø k·ª∑ XVIII, trong th·ªùi k·ª≥ c√°ch m·∫°ng t∆∞ s·∫£n Ph√°p",
              "ƒê·∫ßu th·∫ø k·ª∑ XIX, khi phong tr√†o c√¥ng nh√¢n b·∫Øt ƒë·∫ßu h√¨nh th√†nh",
            ],
            correctAnswer: 0,
            explanation:
              "Tri·∫øt h·ªçc M√°c - L√™-nin ra ƒë·ªùi v√†o gi·ªØa th·∫ø k·ª∑ XIX, trong b·ªëi c·∫£nh ch·ªß nghƒ©a t∆∞ b·∫£n ƒëang ph√°t tri·ªÉn m·∫°nh m·∫Ω v√† giai c·∫•p c√¥ng nh√¢n ƒëang h√¨nh th√†nh, tr·ªü th√†nh m·ªôt l·ª±c l∆∞·ª£ng x√£ h·ªôi ƒë·ªôc l·∫≠p.",
          },
        ],
      };
    }
  } catch (error) {
    console.error("‚ùå JSON generation failed:", error.message);

    // Tr·∫£ v·ªÅ JSON gi·∫£ trong tr∆∞·ªùng h·ª£p l·ªói nghi√™m tr·ªçng
    return {
      title: "B√†i h·ªçc v·ªÅ tri·∫øt h·ªçc M√°c-L√™nin (Emergency Fallback)",
      questions: [
        {
          type: "multiple_choice",
          content: "Ai l√† ng∆∞·ªùi s√°ng l·∫≠p ra ch·ªß nghƒ©a M√°c?",
          options: [
            "Karl Marx v√† Friedrich Engels",
            "Vladimir Lenin",
            "Joseph Stalin",
            "Rosa Luxemburg",
          ],
          correctAnswer: 0,
          explanation:
            "Karl Marx v√† Friedrich Engels l√† hai nh√† t∆∞ t∆∞·ªüng ƒë√£ c√πng s√°ng l·∫≠p ra ch·ªß nghƒ©a M√°c v√†o th·∫ø k·ª∑ 19.",
        },
      ],
    };
  }
};

/**
 * Ki·ªÉm tra k·∫øt n·ªëi v·ªõi OpenRouter API
 */
const validateConnection = async () => {
  try {
    console.log("üîç Testing OpenRouter API connection...");

    // S·ª≠ d·ª•ng prompt ƒë∆°n gi·∫£n v√† ng·∫Øn ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
    const testPrompt = "Tr·∫£ l·ªùi ng·∫Øn g·ªçn (1-2 c√¢u): Tri·∫øt h·ªçc M√°c-L√™Nin l√† g√¨?";
    const response = await generateContent(testPrompt, 1);

    if (
      response &&
      response.success &&
      response.content &&
      response.content.length > 10
    ) {
      const modelUsed = response.model || QWEN_MODEL_ID;
      console.log(`‚úÖ Connection successful with model: ${modelUsed}`);
      return {
        success: true,
        message: `OpenRouter API connection validated successfully using ${modelUsed}`,
        model: modelUsed,
        response: response.content.substring(0, 100) + "...",
      };
    } else {
      throw new Error("Invalid response from OpenRouter API");
    }
  } catch (error) {
    console.error("‚ùå OpenRouter API connection failed:", error.message);
    return {
      success: false,
      message: `OpenRouter API connection failed: ${error.message}`,
      error: error.message,
    };
  }
};

export default {
  generateContent,
  generateJsonContent,
  validateConnection,
};
