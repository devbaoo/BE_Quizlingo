import mongoose from "mongoose";
import geminiService from "./geminiService.js";
import multiAiService from "./multiAiService.js";
import Lesson from "../models/lesson.js";
import Question from "../models/question.js";
import MarxistLearningPath from "../models/marxistLearningPath.js";
import MarxistTopic from "../models/marxistTopic.js";
import User from "../models/user.js";
import Progress from "../models/progress.js";
import Level from "../models/level.js";
import Topic from "../models/topic.js";
import Skill from "../models/skill.js";
import NotificationService from "./notificationService.js";
import contentService from "./contentService.js";
import UserPackage from "../models/userPackage.js";
import moment from "moment-timezone";
import generationRateLimiter from "../middleware/rateLimiter.js";
import cacheService from "./cacheService.js";

// Import lives management t·ª´ lessonService
import { checkAndRegenerateLives } from "./lessonService.js";

/**
 * T√≠nh XP c·∫ßn thi·∫øt ƒë·ªÉ l√™n level
 * @param {number} level - Level hi·ªán t·∫°i
 * @returns {number} Required XP
 */
const getRequiredXpForLevel = (level) => {
  // Gi·∫£m t·ªëc ƒë·ªô tƒÉng XP y√™u c·∫ßu ƒë·ªÉ user d·ªÖ l√™n c·∫•p h∆°n
  return Math.floor(100 * Math.pow(1.3, level - 1));
};

// Mutex ƒë·ªÉ tr√°nh concurrent generation cho c√πng 1 user
const generatingUsers = new Set();
// Flag ƒë·ªÉ tr√°nh t·∫°o b√†i h·ªçc khi ƒëang trong background generation
const backgroundGeneratingUsers = new Set();

// H√†m l·∫•y t·∫•t c·∫£ ch·ªß ƒë·ªÅ Marxist t·ª´ database (v·ªõi caching)
const getAllMarxistTopics = async () => {
  try {
    return await cacheService.getOrSetMarxistTopics(async () => {
      const topics = await MarxistTopic.find({ isActive: true }).sort({
        displayOrder: 1,
        createdAt: 1,
      });
      console.log(`üìö Loaded ${topics.length} Marxist topics from database`);
      return topics;
    });
  } catch (error) {
    console.error("Error getting Marxist topics:", error);
    return [];
  }
};

/**
 * L·∫•y th·ª© t·ª± ti·∫øp theo cho l·ªô tr√¨nh h·ªçc Marxist
 * @param {string} userId - User ID
 * @returns {number} Order number
 */
const getNextMarxistOrder = async (userId) => {
  const lastPath = await MarxistLearningPath.findOne({ userId }).sort({
    order: -1,
  });
  return lastPath ? lastPath.order + 1 : 1;
};

/**
 * Ph√¢n t√≠ch k·∫øt qu·∫£ h·ªçc t·∫≠p tr∆∞·ªõc ƒë√≥ ƒë·ªÉ x√°c ƒë·ªãnh ƒë·ªô kh√≥ v√† ch·ªß ƒë·ªÅ ti·∫øp theo
 * @param {string} userId - User ID
 * @returns {Object} Analysis result
 */
const analyzeUserProgress = async (userId) => {
  try {
    // L·∫•y 3 lesson Marxist g·∫ßn nh·∫•t
    const recentPaths = await MarxistLearningPath.find({ userId })
      .sort({ order: -1 })
      .limit(3)
      .populate("lessonId");

    if (recentPaths.length === 0) {
      // User m·ªõi, l·∫•y ch·ªß ƒë·ªÅ ƒë·∫ßu ti√™n t·ª´ database
      const allTopics = await getAllMarxistTopics();
      const firstTopic = allTopics.length > 0 ? allTopics[0]._id : null;

      if (!firstTopic) {
        throw new Error("Kh√¥ng c√≥ ch·ªß ƒë·ªÅ Marxist n√†o trong database");
      }

      return {
        recommendedTopic: firstTopic,
        difficultyLevel: allTopics[0].suggestedDifficulty || 1,
        reason: "Ng∆∞·ªùi h·ªçc m·ªõi b·∫Øt ƒë·∫ßu v·ªõi tri·∫øt h·ªçc M√°c-L√™-Nin",
      };
    }

    // T√≠nh ƒëi·ªÉm trung b√¨nh
    const completedPaths = recentPaths.filter(
      (path) => path.completed && path.achievedScore !== null
    );
    let averageScore = 0;

    if (completedPaths.length > 0) {
      averageScore =
        completedPaths.reduce((sum, path) => sum + path.achievedScore, 0) /
        completedPaths.length;
    }

    // X√°c ƒë·ªãnh ƒë·ªô kh√≥ ti·∫øp theo
    let newDifficulty = 1;
    if (averageScore >= 90)
      newDifficulty = Math.min(5, recentPaths[0].difficultyLevel + 1);
    else if (averageScore >= 80) newDifficulty = recentPaths[0].difficultyLevel;
    else if (averageScore >= 70)
      newDifficulty = Math.max(1, recentPaths[0].difficultyLevel - 1);
    else newDifficulty = Math.max(1, recentPaths[0].difficultyLevel - 2);

    // X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ti·∫øp theo
    const studiedTopicIds = recentPaths.map((path) =>
      path.marxistTopic.toString()
    );
    const allTopics = await getAllMarxistTopics();
    const unstudiedTopics = allTopics.filter(
      (topic) => !studiedTopicIds.includes(topic._id.toString())
    );

    let recommendedTopic;
    if (unstudiedTopics.length > 0) {
      // Ch·ªçn ch·ªß ƒë·ªÅ ch∆∞a h·ªçc
      recommendedTopic = unstudiedTopics[0]._id;
    } else {
      // √în l·∫°i ch·ªß ƒë·ªÅ y·∫øu nh·∫•t
      const weakestTopic =
        completedPaths.length > 0
          ? completedPaths.reduce((weakest, current) =>
            !weakest || current.achievedScore < weakest.achievedScore
              ? current
              : weakest
          )
          : null;
      recommendedTopic = weakestTopic
        ? weakestTopic.marxistTopic
        : allTopics[0]._id;
    }

    return {
      recommendedTopic,
      difficultyLevel: newDifficulty,
      previousScore: Math.round(averageScore),
      reason: `D·ª±a tr√™n k·∫øt qu·∫£ ${completedPaths.length
        } b√†i h·ªçc g·∫ßn nh·∫•t (ƒëi·ªÉm TB: ${Math.round(averageScore)})`,
    };
  } catch (error) {
    console.error("Error analyzing user progress:", error);
    const allTopics = await getAllMarxistTopics();
    const firstTopic = allTopics.length > 0 ? allTopics[0]._id : null;

    return {
      recommendedTopic: firstTopic,
      difficultyLevel: 1,
      reason: "L·ªói ph√¢n t√≠ch, b·∫Øt ƒë·∫ßu v·ªõi ch·ªß ƒë·ªÅ c∆° b·∫£n",
    };
  }
};

/**
 * Generate c√¢u h·ªèi v·ªÅ tri·∫øt h·ªçc M√°c-L√™-Nin v·ªõi Rate Limiting
 * @param {string} userId - User ID
 * @param {Object} options - Generation options
 * @returns {Object} Generated lesson
 */
const generateMarxistLesson = async (userId, options = {}) => {
  console.log(`üöÄ Request to generate Marxist lesson for user ${userId}`);

  // Ki·ªÉm tra xem c√≥ ƒëang trong background generation kh√¥ng
  if (backgroundGeneratingUsers.has(userId)) {
    console.log(`‚è≥ User ${userId} is in background generation, skipping manual generation...`);
    return {
      success: false,
      statusCode: 429,
      message: "H·ªá th·ªëng ƒëang t·∫°o b√†i h·ªçc t·ª± ƒë·ªông, vui l√≤ng ch·ªù...",
    };
  }

  // S·ª≠ d·ª•ng Rate Limiter thay v√¨ simple mutex
  try {
    return await generationRateLimiter.requestGeneration(userId, async () => {
      return await _generateMarxistLessonInternal(userId, options);
    });
  } catch (rateLimitError) {
    console.warn(
      `‚ö†Ô∏è Rate limit error for user ${userId}:`,
      rateLimitError.message
    );
    return rateLimitError;
  }
};

/**
 * Internal function ƒë·ªÉ generate lesson (ƒë∆∞·ª£c g·ªçi b·ªüi rate limiter)
 * @param {string} userId - User ID
 * @param {Object} options - Generation options
 * @returns {Object} Generated lesson
 */
const _generateMarxistLessonInternal = async (userId, options = {}) => {
  try {
    console.log(`üîÑ Generating lesson for user ${userId} (within rate limit)`);

    const user = await User.findById(userId);
    if (!user) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      };
    }

    // Ph√¢n t√≠ch ti·∫øn ƒë·ªô h·ªçc t·∫≠p (v·ªõi caching)
    const analysis = await cacheService.getOrSetUserProgress(
      userId,
      async (userId) => {
        return await analyzeUserProgress(userId);
      }
    );

    let topicId = options.topic;
    let difficulty = options.difficulty;

    // Lu√¥n random topic thay v√¨ d√πng recommended (tr·ª´ khi c√≥ topic c·ª• th·ªÉ)
    if (!topicId) {
      const allTopics = await getAllMarxistTopics();
      if (allTopics.length > 0) {
        const randomTopic = allTopics[Math.floor(Math.random() * allTopics.length)];
        topicId = randomTopic._id;
        console.log(`üé≤ Random selected topic: ${randomTopic.title || randomTopic.name}`);
      } else {
        topicId = analysis.recommendedTopic; // Fallback
      }
    }

    // N·∫øu kh√¥ng c√≥ difficulty, d√πng t·ª´ analysis
    if (!difficulty) {
      difficulty = analysis.difficultyLevel;
    }

    // N·∫øu topicId l√† string name, t√¨m topic trong database
    let topicInfo;
    if (typeof topicId === "string" && !topicId.match(/^[0-9a-fA-F]{24}$/)) {
      topicInfo = await MarxistTopic.findOne({ name: topicId, isActive: true });
      if (!topicInfo) {
        return {
          success: false,
          statusCode: 400,
          message: `Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ v·ªõi name: ${topicId}`,
        };
      }
      topicId = topicInfo._id;
    } else {
      topicInfo = await MarxistTopic.findById(topicId);
      if (!topicInfo || !topicInfo.isActive) {
        return {
          success: false,
          statusCode: 400,
          message: "Ch·ªß ƒë·ªÅ kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông",
        };
      }
    }

    // X√¢y d·ª±ng prompt cho Multi-AI, c√≥ th·ªÉ th√™m g·ª£i √Ω t·ª´ ContentPack (summary, keyPoints)
    const contentHints = options.contentHints || null;
    const hintsText = contentHints
      ? `\n\nC∆° s·ªü t·∫°o c√¢u h·ªèi (t√≥m t·∫Øt tr∆∞·ªõc khi √¥n):\n- Ti√™u ƒë·ªÅ: ${contentHints.title || topicInfo.title}\n- T√≥m t·∫Øt: ${contentHints.summary || ""}\n- Key points: ${(contentHints.keyPoints || []).join(", ")}`
      : "";

    // S·ª≠ d·ª•ng contentHints title n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng topicInfo.title
    const finalTitle = contentHints?.title || topicInfo.title;
    const finalDescription = contentHints?.summary || topicInfo.description;

    const prompt = `
B·∫°n l√† chuy√™n gia v·ªÅ TRI·∫æT H·ªåC M√°c-L√™-Nin. H√£y t·∫°o 10 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ ch·ªß ƒë·ªÅ "${finalTitle}" v·ªõi ƒë·ªô kh√≥ c·∫•p ƒë·ªô ${difficulty}/5.${hintsText}

‚ö†Ô∏è QUAN TR·ªåNG: CH·ªà T·∫¨P TRUNG V√ÄO TRI·∫æT H·ªåC M√ÅC-L√ä-NIN, KH√îNG PH·∫¢I KINH T·∫æ CH√çNH TR·ªä!
üéØ TITLE PH·∫¢I L√Ä: "${finalTitle}" - KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI!

Ch·ªß ƒë·ªÅ: ${finalTitle}
M√¥ t·∫£: ${finalDescription}
T·ª´ kh√≥a quan tr·ªçng: ${topicInfo.keywords.join(", ")}

Y√™u c·∫ßu:
- ƒê√∫ng 10 c√¢u h·ªèi tr·∫Øc nghi·ªám (multiple choice)
- M·ªói c√¢u c√≥ 4 ƒë√°p √°n (A, B, C, D)
- N·ªôi dung CH·ªà V·ªÄ TRI·∫æT H·ªåC M√°c-L√™-Nin (duy v·∫≠t bi·ªán ch·ª©ng, nh·∫≠n th·ª©c lu·∫≠n, quy lu·∫≠t tri·∫øt h·ªçc)
- KH√îNG h·ªèi v·ªÅ kinh t·∫ø, gi√° tr·ªã th·∫∑ng d∆∞, t∆∞ b·∫£n, b√≥c l·ªôt
- ƒê·ªô kh√≥ ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${difficulty}
- C√¢u h·ªèi v·ªÅ: quy lu·∫≠t, ph∆∞∆°ng ph√°p lu·∫≠n, nh·∫≠n th·ª©c, th·ª±c ti·ªÖn, √Ω th·ª©c
- Th·ªùi gian l√†m m·ªói c√¢u: 30 gi√¢y
- QUAN TR·ªåNG: ƒê√°p √°n ƒë√∫ng ph·∫£i RANDOM (A, B, C, D), kh√¥ng ƒë∆∞·ª£c t·∫•t c·∫£ ƒë·ªÅu l√† A!

‚ö†Ô∏è CH·ªà tr·∫£ v·ªÅ k·∫øt qu·∫£ ·ªü ƒë·ªãnh d·∫°ng JSON. KH√îNG th√™m b·∫•t k·ª≥ d√≤ng ch·ªØ n√†o tr∆∞·ªõc/sau.

{
  "title": "${finalTitle}",
  "questions": [
    {
      "type": "multiple_choice",
      "content": "N·ªôi dung c√¢u h·ªèi...",
      "options": ["A. ƒê√°p √°n A", "B. ƒê√°p √°n B", "C. ƒê√°p √°n C", "D. ƒê√°p √°n D"],
      "correctAnswer": "A. ƒê√°p √°n A",
      "score": 100,
      "timeLimit": 30
    }
  ]
}`;

    // Khai b√°o lessonData variable
    let lessonData;

    // Ki·ªÉm tra development mode - skip Gemini n·∫øu c√≥ bi·∫øn m√¥i tr∆∞·ªùng
    if (process.env.SKIP_GEMINI === "true") {
      console.warn("üöß SKIP_GEMINI enabled - creating demo lesson...");

      // T·∫°o demo lesson v·ªõi 10 c√¢u h·ªèi tri·∫øt h·ªçc ƒë·ªÉ user c√≥ th·ªÉ test ƒë·∫ßy ƒë·ªß
      const demoQuestions = [];
      const philosophyDemoQuestions = [
        "Theo tri·∫øt h·ªçc M√°c-L√™-Nin, quy lu·∫≠t c∆° b·∫£n c·ªßa duy v·∫≠t bi·ªán ch·ª©ng l√† g√¨?",
        "Theo ${topicInfo.title}, m·ªëi quan h·ªá gi·ªØa nh·∫≠n th·ª©c v√† th·ª±c ti·ªÖn nh∆∞ th·∫ø n√†o?",
        "Quy lu·∫≠t th·ªëng nh·∫•t v√† ƒë·∫•u tranh c·ªßa c√°c m·∫∑t ƒë·ªëi l·∫≠p th·ªÉ hi·ªán ƒëi·ªÅu g√¨?",
        "Theo duy v·∫≠t l·ªãch s·ª≠, c∆° s·ªü h·∫° t·∫ßng v√† ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng c√≥ m·ªëi quan h·ªá ra sao?",
        "Ch√¢n l√Ω trong tri·∫øt h·ªçc M√°c-L√™-Nin c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
        "Quy lu·∫≠t l∆∞·ª£ng ch·∫•t th·ªÉ hi·ªán quy lu·∫≠t n√†o c·ªßa s·ª± ph√°t tri·ªÉn?",
        "Theo nh·∫≠n th·ª©c lu·∫≠n M√°c-x√≠t, vai tr√≤ c·ªßa th·ª±c ti·ªÖn l√† g√¨?",
        "Quy lu·∫≠t ph·ªß ƒë·ªãnh c·ªßa ph·ªß ƒë·ªãnh gi·∫£i th√≠ch ƒëi·ªÅu g√¨?",
        "Theo tri·∫øt h·ªçc M√°c-L√™-Nin, √Ω th·ª©c x√£ h·ªôi ƒë∆∞·ª£c quy ƒë·ªãnh b·ªüi ƒëi·ªÅu g√¨?",
        "B·∫£n ch·∫•t con ng∆∞·ªùi theo quan ni·ªám M√°c-x√≠t l√† g√¨?",
      ];

      for (let i = 1; i <= 10; i++) {
        demoQuestions.push({
          type: "multiple_choice",
          content: `C√¢u ${i}: ${philosophyDemoQuestions[i - 1] ||
            `Theo tri·∫øt h·ªçc ${topicInfo.title}, ƒëi·ªÅu n√†o sau ƒë√¢y ƒë√∫ng?`
            } (Demo)`,
          options: [
            `A. ƒê√°p √°n A c·ªßa c√¢u ${i}`,
            `B. ƒê√°p √°n B c·ªßa c√¢u ${i}`,
            `C. ƒê√°p √°n C c·ªßa c√¢u ${i}`,
            `D. ƒê√°p √°n D c·ªßa c√¢u ${i}`,
          ],
          correctAnswer: `A. ƒê√°p √°n A c·ªßa c√¢u ${i}`,
          score: 100,
          timeLimit: 30,
        });
      }

      lessonData = {
        title: `[DEMO] ${topicInfo.title} - C·∫•p ƒë·ªô ${difficulty}`,
        questions: demoQuestions,
      };

      console.log("üìù Creating demo lesson with 10 questions...");
    } else {
      console.log(
        "üîÑ Generating Marxist lesson with Multi-AI (Grok4 + Gemini)..."
      );
      const aiResult = await multiAiService.generateJsonContent(prompt, {
        strategy: "weighted", // Load balance between Gemini and DeepSeek
        maxRetries: 3,
        maxProviderRetries: 2,
      });

      if (!aiResult.success) {
        // N·∫øu t·∫•t c·∫£ AI APIs th·∫•t b·∫°i, t·∫°o demo lesson ƒë·ªÉ kh√¥ng block user
        console.warn("‚ö†Ô∏è All AI APIs failed, creating demo lesson...");
        console.log("AI failure details:", aiResult.loadBalancer);

        // T·∫°o demo lesson v·ªõi 10 c√¢u h·ªèi tri·∫øt h·ªçc ƒë·ªÉ user c√≥ th·ªÉ test ƒë·∫ßy ƒë·ªß
        const demoQuestions = [];
        const philosophyDemoQuestions = [
          "Theo tri·∫øt h·ªçc M√°c-L√™-Nin, quy lu·∫≠t c∆° b·∫£n c·ªßa duy v·∫≠t bi·ªán ch·ª©ng l√† g√¨?",
          "Theo ${topicInfo.title}, m·ªëi quan h·ªá gi·ªØa nh·∫≠n th·ª©c v√† th·ª±c ti·ªÖn nh∆∞ th·∫ø n√†o?",
          "Quy lu·∫≠t th·ªëng nh·∫•t v√† ƒë·∫•u tranh c·ªßa c√°c m·∫∑t ƒë·ªëi l·∫≠p th·ªÉ hi·ªán ƒëi·ªÅu g√¨?",
          "Theo duy v·∫≠t l·ªãch s·ª≠, c∆° s·ªü h·∫° t·∫ßng v√† ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng c√≥ m·ªëi quan h·ªá ra sao?",
          "Ch√¢n l√Ω trong tri·∫øt h·ªçc M√°c-L√™-Nin c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
          "Quy lu·∫≠t l∆∞·ª£ng ch·∫•t th·ªÉ hi·ªán quy lu·∫≠t n√†o c·ªßa s·ª± ph√°t tri·ªÉn?",
          "Theo nh·∫≠n th·ª©c lu·∫≠n M√°c-x√≠t, vai tr√≤ c·ªßa th·ª±c ti·ªÖn l√† g√¨?",
          "Quy lu·∫≠t ph·ªß ƒë·ªãnh c·ªßa ph·ªß ƒë·ªãnh gi·∫£i th√≠ch ƒëi·ªÅu g√¨?",
          "Theo tri·∫øt h·ªçc M√°c-L√™-Nin, √Ω th·ª©c x√£ h·ªôi ƒë∆∞·ª£c quy ƒë·ªãnh b·ªüi ƒëi·ªÅu g√¨?",
          "B·∫£n ch·∫•t con ng∆∞·ªùi theo quan ni·ªám M√°c-x√≠t l√† g√¨?",
        ];

        for (let i = 1; i <= 10; i++) {
          demoQuestions.push({
            type: "multiple_choice",
            content: `C√¢u ${i}: ${philosophyDemoQuestions[i - 1] ||
              `Theo tri·∫øt h·ªçc ${topicInfo.title}, ƒëi·ªÅu n√†o sau ƒë√¢y ƒë√∫ng?`
              } (Demo)`,
            options: [
              `A. ƒê√°p √°n A c·ªßa c√¢u ${i}`,
              `B. ƒê√°p √°n B c·ªßa c√¢u ${i}`,
              `C. ƒê√°p √°n C c·ªßa c√¢u ${i}`,
              `D. ƒê√°p √°n D c·ªßa c√¢u ${i}`,
            ],
            correctAnswer: `A. ƒê√°p √°n A c·ªßa c√¢u ${i}`,
            score: 100,
            timeLimit: 30,
          });
        }

        lessonData = {
          title: `[DEMO] ${topicInfo.title} - C·∫•p ƒë·ªô ${difficulty}`,
          questions: demoQuestions,
        };

        console.log("üìù Creating demo lesson with generated questions...");
      } else {
        lessonData = aiResult.data;
        console.log(
          `‚úÖ Using AI-generated lesson data from ${aiResult.provider}`
        );

        // Log load balancer stats
        if (aiResult.loadBalancer) {
          console.log("üìä Load balancer stats:", {
            provider: aiResult.provider,
            strategy: aiResult.loadBalancer.strategy,
            totalProviders: aiResult.loadBalancer.totalProviders,
          });
        }
      }
    }

    // Validate lesson data
    if (!lessonData || !lessonData.questions) {
      console.error("‚ùå Invalid lesson data:", lessonData);
      return {
        success: false,
        statusCode: 500,
        message: "Lesson data kh√¥ng h·ª£p l·ªá",
      };
    }

    console.log(`üìä Lesson data: ${lessonData.questions.length} questions`);

    // Validate s·ªë l∆∞·ª£ng c√¢u h·ªèi (flexible cho demo)
    if (lessonData.questions.length === 0) {
      return {
        success: false,
        statusCode: 500,
        message: "Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong b√†i h·ªçc",
      };
    }

    // Warn n·∫øu kh√¥ng ph·∫£i 10 c√¢u nh∆∞ng v·∫´n cho ph√©p t·∫°o
    if (lessonData.questions.length !== 10) {
      console.warn(
        `‚ö†Ô∏è Expected 10 questions, got ${lessonData.questions.length}`
      );
    }

    // T√¨m ho·∫∑c t·∫°o Topic, Level, Skill v·ªõi error handling
    console.log("üìã Finding or creating Topic, Level, Skill...");

    let topicDoc = await Topic.findOne({ name: "Marxist Philosophy" });
    if (!topicDoc) {
      console.log("üîß Creating Marxist Philosophy topic...");
      topicDoc = await Topic.create({
        name: "Marxist Philosophy",
        description:
          "Tri·∫øt h·ªçc M√°c-L√™-Nin: duy v·∫≠t bi·ªán ch·ª©ng, nh·∫≠n th·ª©c lu·∫≠n, quy lu·∫≠t tri·∫øt h·ªçc",
        isActive: true,
      });
    }

    let levelDoc = await Level.findOne({ name: "marxist_intermediate" });
    if (!levelDoc) {
      console.log("üîß Creating marxist_intermediate level...");

      // T√¨m order cao nh·∫•t hi·ªán t·∫°i v√† +1
      const lastLevel = await Level.findOne().sort({ order: -1 });
      const nextOrder = lastLevel ? lastLevel.order + 1 : 1;

      levelDoc = await Level.create({
        name: "marxist_intermediate",
        description: "Tr√¨nh ƒë·ªô trung c·∫•p Marxist",
        order: nextOrder,
        minScoreRequired: 70,
        minUserLevel: 1,
        minLessonPassed: 0,
        maxScore: 3000,
        timeLimit: 300, // 30s * 10 c√¢u
        isActive: true,
      });

      console.log(`‚úÖ Created level with order: ${nextOrder}`);
    }

    let skillDoc = await Skill.findOne({ name: "marxist_philosophy" });
    if (!skillDoc) {
      console.log("üîß Creating marxist_philosophy skill...");
      skillDoc = await Skill.create({
        name: "marxist_philosophy",
        description:
          "Tri·∫øt h·ªçc M√°c-L√™-Nin: ph∆∞∆°ng ph√°p lu·∫≠n, nh·∫≠n th·ª©c lu·∫≠n, quy lu·∫≠t bi·ªán ch·ª©ng",
        supportedTypes: ["multiple_choice"],
        isActive: true,
      });
    }

    // Validate t·∫•t c·∫£ ƒë·ªÅu t·ªìn t·∫°i
    if (!topicDoc || !levelDoc || !skillDoc) {
      console.error("‚ùå Failed to create required models:", {
        topicDoc: !!topicDoc,
        levelDoc: !!levelDoc,
        skillDoc: !!skillDoc,
      });
      return {
        success: false,
        statusCode: 500,
        message: "Kh√¥ng th·ªÉ t·∫°o Topic, Level, ho·∫∑c Skill c·∫ßn thi·∫øt",
      };
    }

    console.log("‚úÖ Topic, Level, Skill ready:", {
      topic: topicDoc.name,
      level: levelDoc.name,
      skill: skillDoc.name,
    });

    // Chu·∫©n h√≥a c√¢u h·ªèi v√† correctAnswer do m·ªôt s·ªë AI c√≥ th·ªÉ tr·∫£ v·ªÅ ch·ªâ "A"/1 thay v√¨ to√†n b·ªô option
    const normalizeCorrectAnswer = (question) => {
      try {
        const options = Array.isArray(question.options) ? question.options : [];
        let answer = question.correctAnswer;

        if (!options.length) return question.correctAnswer;

        // N·∫øu answer l√† s·ªë (1-4)
        if (typeof answer === "number") {
          const idx = Math.max(0, Math.min(options.length - 1, answer - 1));
          return options[idx];
        }

        if (typeof answer === "string") {
          const trimmed = answer.trim();

          // N·∫øu l√† ch·ªØ c√°i A-D
          const letterMatch = trimmed.match(/^[A-Da-d]$/);
          if (letterMatch) {
            const idx = trimmed.toUpperCase().charCodeAt(0) - 65; // A->0
            return options[idx] || options[0];
          }

          // N·∫øu l√† ti·ªÅn t·ªë "A." ho·∫∑c "A)"
          const letterPrefix = trimmed.match(/^([A-Da-d])[\.)\-\s]?/);
          if (letterPrefix) {
            const idx = letterPrefix[1].toUpperCase().charCodeAt(0) - 65;
            return options[idx] || options[0];
          }

          // Kh·ªõp g·∫ßn ƒë√∫ng: lo·∫°i b·ªè ti·ªÅn t·ªë "A. " khi so s√°nh
          const normalizeText = (s) => String(s).replace(/^\s*[A-Da-d][\.)\-]\s*/, "").trim();
          const normalizedAnswer = normalizeText(trimmed);
          const found = options.find((opt) => normalizeText(opt) === normalizedAnswer);
          if (found) return found;

          // N·∫øu ƒë√£ kh·ªõp ch√≠nh x√°c v·ªõi m·ªôt option
          const exact = options.find((opt) => opt === trimmed);
          if (exact) return exact;
        }

        // Fallback: ch·ªçn option ƒë·∫ßu ti√™n ƒë·ªÉ kh√¥ng ch·∫∑n t·∫°o b√†i
        return options[0];
      } catch (e) {
        return question.correctAnswer;
      }
    };

    // Force chia ƒë·ªÅu ƒë√°p √°n ƒë√∫ng gi·ªØa A, B, C, D
    const balanceCorrectAnswers = (questions) => {
      const answers = ['A', 'B', 'C', 'D'];
      const balancedAnswers = [];

      // Chia ƒë·ªÅu: 10 c√¢u = 2-3 c√¢u m·ªói ƒë√°p √°n
      const questionsPerAnswer = Math.floor(questions.length / 4); // 2 c√¢u m·ªói ƒë√°p √°n
      const remainder = questions.length % 4; // 2 c√¢u d∆∞

      // Th√™m c√¢u h·ªèi cho m·ªói ƒë√°p √°n
      for (let i = 0; i < 4; i++) {
        const count = questionsPerAnswer + (i < remainder ? 1 : 0);
        for (let j = 0; j < count; j++) {
          balancedAnswers.push(answers[i]);
        }
      }

      // Shuffle ƒë·ªÉ random v·ªã tr√≠
      for (let i = balancedAnswers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [balancedAnswers[i], balancedAnswers[j]] = [balancedAnswers[j], balancedAnswers[i]];
      }

      console.log(`üéØ Generated balanced answers: ${balancedAnswers.join(', ')}`);
      return balancedAnswers;
    };

    // Ki·ªÉm tra v√† c·∫£nh b√°o n·∫øu t·∫•t c·∫£ ƒë√°p √°n ƒë√∫ng ƒë·ªÅu l√† A
    const checkAnswerDistribution = (questions) => {
      const correctAnswers = questions.map(q => {
        const answer = q.correctAnswer || "";
        const match = answer.match(/^([A-Da-d])/);
        return match ? match[1].toUpperCase() : "A";
      });

      const aCount = correctAnswers.filter(a => a === "A").length;
      if (aCount >= 8) { // N·∫øu 8/10 c√¢u ƒë·ªÅu l√† A
        console.warn(`‚ö†Ô∏è Warning: ${aCount}/10 questions have answer A. Balancing answers...`);
        return true; // C·∫ßn balance
      }

      return false; // Kh√¥ng c·∫ßn balance
    };

    const processedQuestions = lessonData.questions.map((q) => {
      const normalized = {
        ...q,
        type: "multiple_choice",
        timeLimit: 30,
        score: 100,
      };
      return {
        ...normalized,
        skill: skillDoc._id,
        correctAnswer: normalizeCorrectAnswer(normalized),
      };
    });

    // LU√îN balance ƒë√°p √°n ƒë√∫ng ƒë·ªÉ ƒë·∫£m b·∫£o random ƒë·ªÅu
    console.log("üîÑ Balancing correct answers distribution...");
    const balancedAnswers = balanceCorrectAnswers(processedQuestions);

    // C·∫≠p nh·∫≠t ƒë√°p √°n ƒë√∫ng cho t·ª´ng c√¢u h·ªèi
    processedQuestions.forEach((question, index) => {
      const balancedAnswer = balancedAnswers[index];
      const options = question.options || [];

      if (options.length >= 4) {
        // T√¨m option t∆∞∆°ng ·ª©ng v·ªõi balanced answer
        const targetOption = options.find(opt =>
          opt.trim().toUpperCase().startsWith(balancedAnswer)
        );

        if (targetOption) {
          question.correctAnswer = targetOption;
          console.log(`‚úÖ Question ${index + 1}: Set correct answer to ${balancedAnswer}`);
        } else {
          // Fallback: t·∫°o ƒë√°p √°n ƒë√∫ng theo format chu·∫©n
          question.correctAnswer = `${balancedAnswer}. ${question.options[balancedAnswer.charCodeAt(0) - 65]?.replace(/^[A-D]\.\s*/, '') || 'ƒê√°p √°n ƒë√∫ng'}`;
          console.log(`‚ö†Ô∏è Question ${index + 1}: Created fallback answer ${balancedAnswer}`);
        }
      }
    });

    // T·∫°o lesson
    console.log("üìù Creating lesson document...");
    const lesson = await Lesson.create({
      title: lessonData.title || `B√†i h·ªçc ${topicInfo.title}`,
      topic: topicDoc._id,
      level: levelDoc._id,
      skills: [skillDoc._id],
      maxScore: lessonData.questions.length * 100, // 100 ƒëi·ªÉm m·ªói c√¢u
      questions: [],
      isActive: true,
    });

    console.log("‚úÖ Lesson created:", lesson._id);

    // T·∫°o questions
    console.log(`üîÑ Creating ${processedQuestions.length} questions...`);
    const questionIds = [];

    for (let i = 0; i < processedQuestions.length; i++) {
      const qData = processedQuestions[i];
      try {
        const question = await Question.create({
          lessonId: lesson._id,
          skill: qData.skill,
          type: qData.type,
          content: qData.content,
          options: qData.options || [],
          correctAnswer: qData.correctAnswer,
          score: qData.score || 100,
          timeLimit: qData.timeLimit || 30,
        });
        questionIds.push(question._id);

        if ((i + 1) % 10 === 0) {
          console.log(
            `‚úÖ Created ${i + 1}/${processedQuestions.length} questions`
          );
        }
      } catch (error) {
        console.error(`‚ùå Failed to create question ${i + 1}:`, error.message);
        throw error;
      }
    }

    // C·∫≠p nh·∫≠t lesson v·ªõi question IDs
    lesson.questions = questionIds;
    await lesson.save();

    // T·∫°o MarxistLearningPath entry
    const pathOrder = await getNextMarxistOrder(userId);
    const learningPath = await MarxistLearningPath.create({
      userId: user._id,
      lessonId: lesson._id,
      source: "ai_generated_marxist",
      marxistTopic: topicId,
      difficultyLevel: difficulty,
      previousScore: analysis.previousScore || 0,
      recommendedReason: analysis.reason,
      order: pathOrder,
    });

    // C·∫≠p nh·∫≠t th·ªëng k√™ cho topic
    await MarxistTopic.findByIdAndUpdate(topicId, {
      $inc: { totalLessonsGenerated: 1 },
    });

    // G·ª≠i notification
    await NotificationService.createNotification(userId, {
      title: "üìö B√†i h·ªçc M√°c-L√™-Nin m·ªõi ƒë√£ s·∫µn s√†ng!",
      message: `AI ƒë√£ t·∫°o b√†i h·ªçc v·ªÅ "${topicInfo.title}" v·ªõi 10 c√¢u h·ªèi. H√£y v√†o h·ªçc ngay!`,
      type: "ai_generated",
      link: "/philosophy",
    });

    return {
      success: true,
      statusCode: 201,
      message: "T·∫°o b√†i h·ªçc tri·∫øt h·ªçc M√°c-L√™-Nin th√†nh c√¥ng",
      lesson: {
        lessonId: lesson._id,
        title: lesson.title,
        topic: topicInfo.title,
        difficultyLevel: difficulty,
        questionCount: questionIds.length,
        maxScore: lesson.maxScore,
        createdAt: lesson.createdAt,
      },
      learningPath: {
        pathId: learningPath._id,
        order: pathOrder,
        marxistTopic: {
          id: topicInfo._id,
          name: topicInfo.name,
          title: topicInfo.title,
        },
        recommendedReason: analysis.reason,
      },
    };
  } catch (error) {
    console.error("Error in _generateMarxistLessonInternal:", error);
    throw error; // Re-throw ƒë·ªÉ rate limiter x·ª≠ l√Ω
  }
};

/**
 * L·∫•y l·ªô tr√¨nh h·ªçc Marxist c·ªßa user
 * @param {string} userId - User ID
 * @param {Object} options - Query options
 * @returns {Object} Learning path
 */
const getMarxistLearningPath = async (userId, options = {}) => {
  try {
    const { page = 1, limit = 10 } = options;
    const skip = (page - 1) * limit;

    // ƒê·∫øm t·ªïng s·ªë b√†i trong l·ªô tr√¨nh
    let total = await MarxistLearningPath.countDocuments({ userId });

    // ‚ùå REMOVED: Auto-generation moved to client-side to prevent duplicate lessons
    // Client should explicitly call POST /marxist-philosophy/generate-lesson when needed
    if (total === 0) {
      console.log(
        "üìã User m·ªõi ch∆∞a c√≥ b√†i h·ªçc Marxist. Client c·∫ßn g·ªçi generate-lesson API."
      );

      // Ki·ªÉm tra xem c√≥ topic n√†o trong database kh√¥ng
      const availableTopics = await getAllMarxistTopics();
      if (availableTopics.length === 0) {
        return {
          success: false,
          statusCode: 500,
          message:
            "Kh√¥ng c√≥ ch·ªß ƒë·ªÅ Marxist n√†o trong database. Admin c·∫ßn seed d·ªØ li·ªáu tr∆∞·ªõc.",
        };
      }

      // Tr·∫£ v·ªÅ empty learning path v·ªõi th√¥ng b√°o ƒë·ªÉ client g·ªçi generate
      return {
        success: true,
        statusCode: 200,
        message: "Ch∆∞a c√≥ b√†i h·ªçc n√†o. H√£y t·∫°o b√†i h·ªçc ƒë·∫ßu ti√™n!",
        learningPath: [],
        total: 0,
        currentPage: parseInt(page),
        totalPages: 0,
        hasNextPage: false,
        hasPrevPage: false,
        needsFirstLesson: true, // Flag ƒë·ªÉ client bi·∫øt c·∫ßn t·∫°o lesson ƒë·∫ßu ti√™n
        availableTopics: availableTopics.length,
      };
    }

    // L·∫•y d·ªØ li·ªáu l·ªô tr√¨nh
    const pathDocs = await MarxistLearningPath.find({ userId })
      .populate({
        path: "lessonId",
        populate: ["topic", "level"],
      })
      .sort({ order: 1 })
      .skip(skip)
      .limit(limit);

    // ‚ùå OLD: Using Progress table - WRONG for Marxist system
    // const completedLessonIds = (
    //     await Progress.distinct('lessonId', {
    //         userId,
    //         status: 'COMPLETE'
    //     })
    // ).map(id => id.toString());

    // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
    const learningPath = pathDocs.map((doc) => {
      const lesson = doc.lessonId;
      // ‚úÖ NEW: Use MarxistLearningPath.completed field directly
      const isCompleted = doc.completed || false; // Use doc.completed from MarxistLearningPath
      const marxistTopic = doc.marxistTopic;

      return {
        pathId: doc._id,
        lessonId: lesson?._id,
        title: lesson?.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
        marxistTopic: {
          id: marxistTopic?._id,
          name: marxistTopic?.name || "unknown",
          title: marxistTopic?.title || "Kh√¥ng x√°c ƒë·ªãnh",
          description: marxistTopic?.description || "",
        },
        difficultyLevel: doc.difficultyLevel,
        recommendedReason: doc.recommendedReason,
        previousScore: doc.previousScore,
        order: doc.order,
        completed: isCompleted, // ‚úÖ Now uses MarxistLearningPath.completed
        achievedScore: doc.achievedScore,
        completedAt: doc.completedAt,
        status: isCompleted ? "COMPLETE" : "LOCKED",
        createdAt: doc.generatedAt,
      };
    });

    return {
      success: true,
      statusCode: 200,
      message: "L·∫•y l·ªô tr√¨nh h·ªçc Marxist th√†nh c√¥ng",
      learningPath,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        totalItems: total,
        pageSize: limit,
      },
    };
  } catch (error) {
    console.error("Error getting Marxist learning path:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi l·∫•y l·ªô tr√¨nh h·ªçc: " + error.message,
    };
  }
};

/**
 * Ho√†n th√†nh b√†i h·ªçc tri·∫øt h·ªçc M√°c-L√™-Nin v·ªõi lives system
 * @param {string} userId - User ID  
 * @param {string} lessonId - Lesson ID
 * @param {number} score - ƒêi·ªÉm s·ªë (0-100)
 * @param {Array} questionResults - K·∫øt qu·∫£ t·ª´ng c√¢u h·ªèi (optional)
 * @returns {Object} Completion result
 */
const completeMarxistLesson = async (
  userId,
  lessonId,
  score,
  questionResults = []
) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      };
    }

    // Regenerate lives tr∆∞·ªõc n·∫øu c·∫ßn
    await checkAndRegenerateLives(user);

    // Ki·ªÉm tra g√≥i premium
    const now = moment().tz("Asia/Ho_Chi_Minh");
    const activePackage = await UserPackage.findOne({
      user: userId,
      isActive: true,
      endDate: { $gt: now.toDate() },
      paymentStatus: "completed",
    }).populate("package");

    const hasPremium = activePackage?.package?.features || {};
    const unlimitedLives = hasPremium.unlimitedLives || false;

    // Tr·ª´ lives n·∫øu score < 70% v√† kh√¥ng ph·∫£i premium
    let livesDeducted = false;
    if (score < 70 && !unlimitedLives) {
      if (user.lives <= 0) {
        return {
          success: false,
          statusCode: 403,
          message:
            "Kh√¥ng ƒë·ªß l∆∞·ª£t ch∆°i. H√£y ch·ªù lives h·ªìi ph·ª•c ho·∫∑c mua g√≥i premium.",
          needsLives: true,
          currentLives: user.lives,
        };
      }

      user.lives -= 1;
      user.lastLivesRegenerationTime = new Date();
      await user.save();
      livesDeducted = true;

      console.log(
        `üíî Deducted 1 life from user ${userId} (score: ${score}%, lives: ${user.lives})`
      );
    }

    // C·∫≠p nh·∫≠t MarxistLearningPath v·ªõi logic completed d·ª±a v√†o score
    const pathDoc = await MarxistLearningPath.findOneAndUpdate(
      { userId, lessonId },
      {
        completed: score >= 70, // Ch·ªâ completed = true khi score >= 70%
        achievedScore: score,
        completedAt: score >= 70 ? new Date() : null, // Ch·ªâ set completedAt khi th·ª±c s·ª± completed
      },
      { new: true }
    );

    if (!pathDoc) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y b√†i h·ªçc trong l·ªô tr√¨nh Marxist",
      };
    }

    // üìä T·∫†O PROGRESS RECORD (gi·ªëng lesson ti·∫øng Anh)
    const lessonStatus = score >= 70 ? "COMPLETE" : "FAILED";
    const isRetried = false; // TODO: Implement retry tracking if needed

    // üîç VALIDATE v√† FILTER questionResults ƒë·ªÉ ƒë·∫£m b·∫£o schema compliance
    const validQuestionResults = Array.isArray(questionResults)
      ? questionResults
        .filter((result) => {
          // Ch·ªâ gi·ªØ l·∫°i results c√≥ questionId (answer c√≥ th·ªÉ r·ªóng n·∫øu user kh√¥ng ch·ªçn)
          return result && result.questionId;
        })
        .map((result) => ({
          questionId: result.questionId,
          answer: result.answer || "", // Cho ph√©p answer r·ªóng n·∫øu user kh√¥ng ch·ªçn
          isCorrect: result.isCorrect || false, // Default false n·∫øu kh√¥ng c√≥
          score: typeof result.score === "number" ? result.score : 0, // Default 0 n·∫øu kh√¥ng c√≥
          isTimeout: result.isTimeout || false,
          transcription: result.transcription || null,
          feedback: result.feedback || null,
        }))
      : [];

    console.log(
      `üìù Creating Progress record: userId=${userId}, lessonId=${lessonId}, score=${score}, status=${lessonStatus}`
    );
    console.log(
      `üìä Valid questionResults: ${validQuestionResults.length}/${questionResults?.length || 0
      }`
    );

    const progress = await Progress.create({
      userId,
      lessonId,
      score,
      status: lessonStatus,
      isRetried,
      questionResults: validQuestionResults,
    });

    console.log(`‚úÖ Progress record created: ${progress._id}`);

    // üéØ C·ªòNG XP V√Ä KI·ªÇM TRA LEVEL UP
    let earnedXP = 0;
    let leveledUp = false;
    let newLevel = user.userLevel;
    let livesFromLevelUp = 0;

    if (score >= 70) {
      // Ch·ªâ c·ªông XP khi pass
      // T√≠nh XP: ƒëi·ªÉm / 10 (gi·ªëng logic English learning)
      earnedXP = Math.round(score / 10);
      user.xp += earnedXP;

      console.log(
        `‚≠ê User ${userId} earned ${earnedXP} XP (score: ${score}%, total XP: ${user.xp})`
      );

      // Ki·ªÉm tra level up
      const requiredXp = getRequiredXpForLevel(user.userLevel);
      if (user.xp >= requiredXp) {
        const oldLevel = user.userLevel;
        user.userLevel += 1;
        user.xp = 0; // Reset XP v·ªÅ 0
        user.lives = Math.min(user.lives + 1, 5); // +1 life (max 5)

        leveledUp = true;
        newLevel = user.userLevel;
        livesFromLevelUp = 1;

        console.log(
          `üéâ User ${userId} leveled up! ${oldLevel} ‚Üí ${newLevel} (gained 1 life, total: ${user.lives})`
        );

        // G·ª≠i notification level up
        try {
          await NotificationService.createNotification(userId, {
            title: "üéâ Ch√∫c m·ª´ng l√™n c·∫•p!",
            message: `B·∫°n ƒë√£ l√™n Level ${newLevel}! Nh·∫≠n th√™m 1 ‚ù§Ô∏è lives v√† unlock t√≠nh nƒÉng m·ªõi.`,
            type: "level_up",
            link: "/profile",
          });
        } catch (error) {
          console.error("Failed to create level up notification:", error);
        }
      }

      // L∆∞u user v·ªõi XP v√† level m·ªõi
      await user.save();
    }

    // Sau khi PASS: t·∫°o h·ªçc li·ªáu ng·∫Øn g·ªçn + b√†i √¥n t·∫≠p 10 c√¢u d·ª±a tr√™n h·ªçc li·ªáu (background, kh√¥ng ch·∫∑n response)
    let nextLessonGenerated = false;
    if (score >= 70) {
      console.log(`üéØ User ${userId} passed lesson (${score}%), starting background generation...`);

      // ƒê√°nh d·∫•u user ƒëang trong background generation ƒë·ªÉ tr√°nh t·∫°o b√†i h·ªçc th·ªß c√¥ng
      backgroundGeneratingUsers.add(userId);

      Promise.resolve().then(async () => {
        try {
          // Random topic m·ªõi cho ContentPack v√† b√†i √¥n t·∫≠p
          const allTopics = await getAllMarxistTopics();
          let randomTopic = null;
          if (allTopics.length > 0) {
            randomTopic = allTopics[Math.floor(Math.random() * allTopics.length)];
            console.log(`üé≤ Random NEW topic for review: ${randomTopic.title || randomTopic.name}`);
          }

          const newTopicTitle = randomTopic
            ? `B√†i t·∫≠p ${randomTopic.title || randomTopic.name} - C·∫•p ƒë·ªô ${pathDoc.difficultyLevel || 3}`
            : `B√†i t·∫≠p Marxist Philosophy - C·∫•p ƒë·ªô ${pathDoc.difficultyLevel || 3}`;

          console.log(`üìö Creating ContentPack for user ${userId}, with NEW random topic: ${newTopicTitle}`);
          const contentPack = await contentService.getOrGenerateContentPack(userId, {
            topicId: randomTopic?._id || pathDoc.marxistTopic, // Random topic m·ªõi
            topicName: newTopicTitle, // Title v·ªõi topic m·ªõi
            level: "intermediate",
            goal: `√în t·∫≠p ch·ªß ƒë·ªÅ m·ªõi: ${randomTopic?.title || randomTopic?.name || 'Marxist Philosophy'}`,
            include: { summary: true, keyPoints: true, mindmap: true, slideOutline: true, flashcards: true },
            forceNew: true, // Force t·∫°o m·ªõi ContentPack sau khi pass lesson
          });
          console.log(`‚úÖ ContentPack created: ${contentPack.title}`);

          try {
            await NotificationService.createNotification(userId, {
              title: "üìò H·ªçc li·ªáu √¥n t·∫≠p ƒë√£ s·∫µn s√†ng",
              message: `ƒê√£ t·∫°o g√≥i h·ªçc li·ªáu ng·∫Øn g·ªçn cho ch·ªß ƒë·ªÅ "${contentPack.title}". V√†o xem nhanh tr∆∞·ªõc khi √¥n t·∫≠p!`,
              type: "study_pack",
              link: "/philosophy",
            });
          } catch (e) {
            console.warn("Notify study pack failed:", e.message);
          }

          // 2) T·∫°o b√†i √¥n t·∫≠p 10 c√¢u d·ª±a tr√™n h·ªçc li·ªáu (contentHints) - g·ªçi tr·ª±c ti·∫øp internal function
          console.log(`üìù Creating review lesson for user ${userId} based on ContentPack`);

          // T·∫°m th·ªùi x√≥a user kh·ªèi background generation ƒë·ªÉ t·∫°o b√†i √¥n t·∫≠p
          backgroundGeneratingUsers.delete(userId);

          const reviewRes = await _generateMarxistLessonInternal(userId, {
            questionCount: 10,
            // Kh√¥ng random topic, s·ª≠ d·ª•ng contentHints ƒë·ªÉ match v·ªõi ContentPack
            contentHints: {
              title: contentPack.title,
              summary: contentPack.summary,
              keyPoints: (contentPack.keyPoints || []).slice(0, 8),
            },
          });

          // Th√™m l·∫°i user v√†o background generation
          backgroundGeneratingUsers.add(userId);

          console.log(`‚úÖ Review lesson created: ${reviewRes?.success ? 'SUCCESS' : 'FAILED'}`);

          if (reviewRes?.success) {
            nextLessonGenerated = true;
            try {
              await NotificationService.createNotification(userId, {
                title: "üìù B√†i √¥n t·∫≠p 10 c√¢u ƒë√£ t·∫°o",
                message: `AI ƒë√£ t·∫°o b√†i √¥n t·∫≠p d·ª±a tr√™n h·ªçc li·ªáu "${contentPack.title}". V√†o l√†m ngay ƒë·ªÉ c·ªßng c·ªë ki·∫øn th·ª©c!`,
                type: "ai_generated",
                link: "/philosophy",
              });
            } catch (e) {
              console.warn("Notify review quiz failed:", e.message);
            }
          }
        } catch (err) {
          console.error("‚ùå Post-pass content/review generation failed:", err.message);
          console.error("Error details:", err);
        } finally {
          // X√≥a flag background generation
          backgroundGeneratingUsers.delete(userId);
          console.log(`üèÅ Background generation completed for user ${userId}`);
        }
      });
    }

    return {
      success: true,
      statusCode: 200,
      message:
        score >= 70
          ? leveledUp
            ? `üéâ Ho√†n th√†nh xu·∫•t s·∫Øc! Nh·∫≠n ${earnedXP} XP v√† l√™n Level ${newLevel}!`
            : `‚úÖ Ho√†n th√†nh xu·∫•t s·∫Øc! Nh·∫≠n ${earnedXP} XP. B√†i h·ªçc ƒë√£ completed.`
          : `ƒêi·ªÉm s·ªë: ${score}%. B√†i h·ªçc ch∆∞a completed. ${livesDeducted ? "ƒê√£ tr·ª´ 1 life." : ""
          } H√£y c·ªë g·∫Øng h∆°n!`,
      pathUpdated: true,
      completed: score >= 70,
      nextLessonGenerated,
      // Lives info
      livesDeducted,
      currentLives: user.lives,
      // Score info
      scoreAchieved: score,
      passed: score >= 70,
      // XP & Level info
      earnedXP,
      leveledUp,
      newLevel,
      livesFromLevelUp,
      currentXP: user.xp,
      nextLevelRequiredXP: leveledUp
        ? getRequiredXpForLevel(newLevel)
        : getRequiredXpForLevel(user.userLevel) - user.xp,
      // Progress info
      progressId: progress._id,
      progressStatus: lessonStatus,
    };
  } catch (error) {
    console.error("Error completing Marxist lesson:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi ho√†n th√†nh b√†i h·ªçc: " + error.message,
    };
  }
};

/**
 * L√†m l·∫°i b√†i h·ªçc tri·∫øt h·ªçc M√°c-L√™-Nin
 * @param {string} userId - User ID
 * @param {string} lessonId - Lesson ID  
 * @param {string} pathId - Learning Path ID (optional)
 * @returns {Object} Retry result
 */
const retryMarxistLesson = async (userId, lessonId, pathId = null) => {
  try {
    const user = await User.findById(userId);
    const lesson = await Lesson.findById(lessonId);

    if (!user || !lesson) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c b√†i h·ªçc",
      };
    }

    // Regenerate lives tr∆∞·ªõc n·∫øu c·∫ßn
    await checkAndRegenerateLives(user);

    // Ki·ªÉm tra g√≥i premium
    const now = moment().tz("Asia/Ho_Chi_Minh");
    const activePackage = await UserPackage.findOne({
      user: userId,
      isActive: true,
      endDate: { $gt: now.toDate() },
      paymentStatus: "completed",
    }).populate("package");

    const hasPremium = activePackage?.package?.features || {};
    const unlimitedLives = hasPremium.unlimitedLives || false;

    // N·∫øu kh√¥ng c√≥ quy·ªÅn l·ª£i lives kh√¥ng gi·ªõi h·∫°n th√¨ ph·∫£i ki·ªÉm tra
    if (!unlimitedLives && user.lives <= 0) {
      return {
        success: false,
        statusCode: 403,
        message:
          "Kh√¥ng ƒë·ªß l∆∞·ª£t ch∆°i ƒë·ªÉ l√†m l·∫°i. H√£y ch·ªù lives h·ªìi ph·ª•c ho·∫∑c mua g√≥i premium.",
        needsLives: true,
        currentLives: user.lives,
      };
    }

    // Reset learning path v·ªÅ ch∆∞a ho√†n th√†nh n·∫øu c√≥ pathId
    if (pathId) {
      await MarxistLearningPath.findByIdAndUpdate(pathId, {
        completed: false,
        achievedScore: null,
        completedAt: null,
      });
    } else {
      // N·∫øu kh√¥ng c√≥ pathId, t√¨m path theo lessonId
      await MarxistLearningPath.findOneAndUpdate(
        { userId, lessonId },
        {
          completed: false,
          achievedScore: null,
          completedAt: null,
        }
      );
    }

    // Tr·ª´ lives n·∫øu kh√¥ng ph·∫£i l√† premium
    if (!unlimitedLives) {
      user.lives -= 1;
      user.lastLivesRegenerationTime = new Date();
      await user.save();
      console.log(
        `üíî Deducted 1 life for retry from user ${userId} (lives: ${user.lives})`
      );
    }

    return {
      success: true,
      statusCode: 200,
      message: unlimitedLives
        ? "C√≥ th·ªÉ l√†m l·∫°i b√†i h·ªçc (Premium)"
        : `C√≥ th·ªÉ l√†m l·∫°i b√†i h·ªçc. Lives c√≤n l·∫°i: ${user.lives}`,
      livesDeducted: !unlimitedLives,
      currentLives: user.lives,
      canRetry: true,
    };
  } catch (error) {
    console.error("Error retrying Marxist lesson:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi l√†m l·∫°i b√†i h·ªçc: " + error.message,
    };
  }
};

/**
 * L·∫•y th·ªëng k√™ h·ªçc t·∫≠p Marxist
 * @param {string} userId - User ID
 * @returns {Object} Statistics
 */
const getMarxistStats = async (userId) => {
  try {
    const totalLessons = await MarxistLearningPath.countDocuments({ userId });
    const completedLessons = await MarxistLearningPath.countDocuments({
      userId,
      completed: true,
    });

    // Th·ªëng k√™ theo ch·ªß ƒë·ªÅ
    const topicStats = await MarxistLearningPath.aggregate([
      { $match: { userId: new mongoose.Types.ObjectId(userId) } },
      {
        $lookup: {
          from: "marxisttopics",
          localField: "marxistTopic",
          foreignField: "_id",
          as: "topicInfo",
        },
      },
      {
        $group: {
          _id: "$marxistTopic",
          topicName: { $first: { $arrayElemAt: ["$topicInfo.name", 0] } },
          topicTitle: { $first: { $arrayElemAt: ["$topicInfo.title", 0] } },
          total: { $sum: 1 },
          completed: {
            $sum: { $cond: ["$completed", 1, 0] },
          },
          avgScore: {
            $avg: { $cond: ["$completed", "$achievedScore", null] },
          },
        },
      },
    ]);

    // ƒêi·ªÉm trung b√¨nh t·ªïng th·ªÉ
    const avgScoreResult = await MarxistLearningPath.aggregate([
      {
        $match: {
          userId: new mongoose.Types.ObjectId(userId),
          completed: true,
          achievedScore: { $ne: null },
        },
      },
      {
        $group: {
          _id: null,
          avgScore: { $avg: "$achievedScore" },
        },
      },
    ]);

    const overallAvgScore =
      avgScoreResult.length > 0 ? Math.round(avgScoreResult[0].avgScore) : 0;

    return {
      success: true,
      statusCode: 200,
      message: "L·∫•y th·ªëng k√™ Marxist th√†nh c√¥ng",
      stats: {
        totalLessons,
        completedLessons,
        completionRate:
          totalLessons > 0
            ? Math.round((completedLessons / totalLessons) * 100)
            : 0,
        overallAvgScore,
        topicBreakdown: topicStats.map((stat) => ({
          topicId: stat._id,
          name: stat.topicName || "unknown",
          title: stat.topicTitle || "Kh√¥ng x√°c ƒë·ªãnh",
          total: stat.total,
          completed: stat.completed,
          avgScore: stat.avgScore ? Math.round(stat.avgScore) : 0,
        })),
      },
    };
  } catch (error) {
    console.error("Error getting Marxist stats:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi l·∫•y th·ªëng k√™: " + error.message,
    };
  }
};

export default {
  generateMarxistLesson,
  analyzeUserProgress,
  getMarxistLearningPath,
  completeMarxistLesson,
  retryMarxistLesson,
  getMarxistStats,
  getAllMarxistTopics,
}; 
