import mongoose from "mongoose";
import geminiService from "./geminiService.js";
import multiAiService from "./multiAiService.js";
import aiGenerationQueue from "./aiGenerationQueue.js";
import Lesson from "../models/lesson.js";
import Question from "../models/question.js";
import MarxistLearningPath from "../models/marxistLearningPath.js";
import MarxistTopic from "../models/marxistTopic.js";
import User from "../models/user.js";
import Progress from "../models/progress.js";
import Level from "../models/level.js";
import Topic from "../models/topic.js";
import Skill from "../models/skill.js";
import NotificationService from "./notificationService.js";
import UserPackage from "../models/userPackage.js";
import moment from "moment-timezone";
import generationRateLimiter from "../middleware/rateLimiter.js";
import cacheService from "./cacheService.js";

// Import lives management t·ª´ lessonService
import { checkAndRegenerateLives } from "./lessonService.js";

/**
 * T√≠nh XP c·∫ßn thi·∫øt ƒë·ªÉ l√™n level
 * @param {number} level - Level hi·ªán t·∫°i
 * @returns {number} Required XP
 */
const getRequiredXpForLevel = (level) => {
  // Gi·∫£m t·ªëc ƒë·ªô tƒÉng XP y√™u c·∫ßu ƒë·ªÉ user d·ªÖ l√™n c·∫•p h∆°n
  return Math.floor(100 * Math.pow(1.3, level - 1));
};

// Mutex ƒë·ªÉ tr√°nh concurrent generation cho c√πng 1 user
const generatingUsers = new Set();
// Flag ƒë·ªÉ tr√°nh t·∫°o b√†i h·ªçc khi ƒëang trong background generation
const backgroundGeneratingUsers = new Set();

// ‚ö° PERFORMANCE: In-memory cache for frequently accessed data
const memoryCache = {
  userProgress: new Map(), // Cache user progress analysis
  topicSelections: new Map(), // Cache recent topic selections

  // Cache with TTL
  set(key, value, ttlSeconds = 300) {
    this[key] = {
      data: value,
      expires: Date.now() + (ttlSeconds * 1000)
    };
  },

  get(key) {
    const cached = this[key];
    if (cached && cached.expires > Date.now()) {
      return cached.data;
    }
    delete this[key];
    return null;
  }
};

// H√†m l·∫•y t·∫•t c·∫£ ch·ªß ƒë·ªÅ Marxist t·ª´ database (v·ªõi caching)
const getAllMarxistTopics = async () => {
  try {
    return await cacheService.getOrSetMarxistTopics(async () => {
      const topics = await MarxistTopic.find({ isActive: true }).sort({
        displayOrder: 1,
        createdAt: 1,
      });
      console.log(`üìö Loaded ${topics.length} Marxist topics from database`);
      return topics;
    });
  } catch (error) {
    console.error("Error getting Marxist topics:", error);
    return [];
  }
};

/**
 * L·∫•y th·ª© t·ª± ti·∫øp theo cho l·ªô tr√¨nh h·ªçc Marxist
 * @param {string} userId - User ID
 * @returns {number} Order number
 */
const getNextMarxistOrder = async (userId) => {
  const lastPath = await MarxistLearningPath.findOne({ userId }).sort({
    order: -1,
  });
  return lastPath ? lastPath.order + 1 : 1;
};

/**
 * Ph√¢n t√≠ch k·∫øt qu·∫£ h·ªçc t·∫≠p tr∆∞·ªõc ƒë√≥ ƒë·ªÉ x√°c ƒë·ªãnh ƒë·ªô kh√≥ v√† ch·ªß ƒë·ªÅ ti·∫øp theo
 * @param {string} userId - User ID
 * @returns {Object} Analysis result
 */
const analyzeUserProgress = async (userId) => {
  try {
    // L·∫•y 3 lesson Marxist g·∫ßn nh·∫•t
    const recentPaths = await MarxistLearningPath.find({ userId })
      .sort({ order: -1 })
      .limit(3)
      .populate("lessonId");

    if (recentPaths.length === 0) {
      // User m·ªõi, l·∫•y ch·ªß ƒë·ªÅ ƒë·∫ßu ti√™n t·ª´ database
      const allTopics = await getAllMarxistTopics();
      const firstTopic = allTopics.length > 0 ? allTopics[0]._id : null;

      if (!firstTopic) {
        throw new Error("Kh√¥ng c√≥ ch·ªß ƒë·ªÅ Marxist n√†o trong database");
      }

      return {
        recommendedTopic: firstTopic,
        difficultyLevel: allTopics[0].suggestedDifficulty || 1,
        reason: "Ng∆∞·ªùi h·ªçc m·ªõi b·∫Øt ƒë·∫ßu v·ªõi tri·∫øt h·ªçc M√°c-L√™-Nin",
      };
    }

    // T√≠nh ƒëi·ªÉm trung b√¨nh
    const completedPaths = recentPaths.filter(
      (path) => path.completed && path.achievedScore !== null
    );
    let averageScore = 0;

    if (completedPaths.length > 0) {
      averageScore =
        completedPaths.reduce((sum, path) => sum + path.achievedScore, 0) /
        completedPaths.length;
    }

    // X√°c ƒë·ªãnh ƒë·ªô kh√≥ ti·∫øp theo
    let newDifficulty = 1;
    if (averageScore >= 90)
      newDifficulty = Math.min(5, recentPaths[0].difficultyLevel + 1);
    else if (averageScore >= 80) newDifficulty = recentPaths[0].difficultyLevel;
    else if (averageScore >= 70)
      newDifficulty = Math.max(1, recentPaths[0].difficultyLevel - 1);
    else newDifficulty = Math.max(1, recentPaths[0].difficultyLevel - 2);

    // X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ti·∫øp theo
    const studiedTopicIds = recentPaths.map((path) =>
      path.marxistTopic.toString()
    );
    const allTopics = await getAllMarxistTopics();
    const unstudiedTopics = allTopics.filter(
      (topic) => !studiedTopicIds.includes(topic._id.toString())
    );

    let recommendedTopic;
    if (unstudiedTopics.length > 0) {
      // Ch·ªçn ch·ªß ƒë·ªÅ ch∆∞a h·ªçc
      recommendedTopic = unstudiedTopics[0]._id;
    } else {
      // √în l·∫°i ch·ªß ƒë·ªÅ y·∫øu nh·∫•t
      const weakestTopic =
        completedPaths.length > 0
          ? completedPaths.reduce((weakest, current) =>
            !weakest || current.achievedScore < weakest.achievedScore
              ? current
              : weakest
          )
          : null;
      recommendedTopic = weakestTopic
        ? weakestTopic.marxistTopic
        : allTopics[0]._id;
    }

    return {
      recommendedTopic,
      difficultyLevel: newDifficulty,
      previousScore: Math.round(averageScore),
      reason: `D·ª±a tr√™n k·∫øt qu·∫£ ${completedPaths.length
        } b√†i h·ªçc g·∫ßn nh·∫•t (ƒëi·ªÉm TB: ${Math.round(averageScore)})`,
    };
  } catch (error) {
    console.error("Error analyzing user progress:", error);
    const allTopics = await getAllMarxistTopics();
    const firstTopic = allTopics.length > 0 ? allTopics[0]._id : null;

    return {
      recommendedTopic: firstTopic,
      difficultyLevel: 1,
      reason: "L·ªói ph√¢n t√≠ch, b·∫Øt ƒë·∫ßu v·ªõi ch·ªß ƒë·ªÅ c∆° b·∫£n",
    };
  }
};

/**
 * Generate c√¢u h·ªèi v·ªÅ tri·∫øt h·ªçc M√°c-L√™-Nin v·ªõi Rate Limiting
 * @param {string} userId - User ID
 * @param {Object} options - Generation options
 * @returns {Object} Generated lesson
 */
const generateMarxistLesson = async (userId, options = {}) => {
  console.log(`üöÄ Request to generate Marxist lesson for user ${userId}`);

  // Ki·ªÉm tra xem c√≥ ƒëang trong background generation kh√¥ng
  if (backgroundGeneratingUsers.has(userId)) {
    console.log(`‚è≥ User ${userId} is in background generation, skipping manual generation...`);
    return {
      success: false,
      statusCode: 429,
      message: "H·ªá th·ªëng ƒëang t·∫°o b√†i h·ªçc t·ª± ƒë·ªông, vui l√≤ng ch·ªù...",
    };
  }

  // ‚ö° PERFORMANCE: Use queue system to manage concurrent AI generations
  try {
    return await aiGenerationQueue.add(async () => {
      return await generationRateLimiter.requestGeneration(userId, async () => {
        return await _generateMarxistLessonInternal(userId, options);
      });
    }, userId);
  } catch (rateLimitError) {
    console.warn(
      `‚ö†Ô∏è Rate limit error for user ${userId}:`,
      rateLimitError.message
    );
    return rateLimitError;
  }
};

/**
 * Internal function ƒë·ªÉ generate lesson (ƒë∆∞·ª£c g·ªçi b·ªüi rate limiter)
 * @param {string} userId - User ID
 * @param {Object} options - Generation options
 * @returns {Object} Generated lesson
 */
const _generateMarxistLessonInternal = async (userId, options = {}) => {
  try {
    console.log(`üîÑ Generating lesson for user ${userId} (within rate limit)`);

    const user = await User.findById(userId);
    if (!user) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      };
    }

    // ‚ö° PERFORMANCE: Cache user progress analysis v·ªõi caching th√¥ng minh
    const progressCacheKey = `user_progress_${userId}`;
    let analysis = memoryCache.get(progressCacheKey);

    if (!analysis) {
      analysis = await cacheService.getOrSetUserProgress(
        userId,
        async (userId) => {
          return await analyzeUserProgress(userId);
        }
      );
      // Cache trong memory cho 2 ph√∫t ƒë·ªÉ tr√°nh re-calculate qu√° nhi·ªÅu
      memoryCache.set(progressCacheKey, analysis, 120);
    } else {
      console.log(`‚ö° Using cached progress analysis for user ${userId}`);
    }

    let topicId = options.topic;
    let difficulty = options.difficulty;

    // Lu√¥n random topic thay v√¨ d√πng recommended (tr·ª´ khi c√≥ topic c·ª• th·ªÉ)
    if (!topicId) {
      const allTopics = await getAllMarxistTopics();
      if (allTopics.length > 0) {
        const randomTopic = allTopics[Math.floor(Math.random() * allTopics.length)];
        topicId = randomTopic._id;
        console.log(`üé≤ Random selected topic: ${randomTopic.title || randomTopic.name}`);
      } else {
        topicId = analysis.recommendedTopic; // Fallback
      }
    }

    // N·∫øu kh√¥ng c√≥ difficulty, d√πng t·ª´ analysis
    if (!difficulty) {
      difficulty = analysis.difficultyLevel;
    }

    // N·∫øu topicId l√† string name, t√¨m topic trong database
    let topicInfo;
    if (typeof topicId === "string" && !topicId.match(/^[0-9a-fA-F]{24}$/)) {
      topicInfo = await MarxistTopic.findOne({ name: topicId, isActive: true });
      if (!topicInfo) {
        return {
          success: false,
          statusCode: 400,
          message: `Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ v·ªõi name: ${topicId}`,
        };
      }
      topicId = topicInfo._id;
    } else {
      topicInfo = await MarxistTopic.findById(topicId);
      if (!topicInfo || !topicInfo.isActive) {
        return {
          success: false,
          statusCode: 400,
          message: "Ch·ªß ƒë·ªÅ kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông",
        };
      }
    }

    // X√¢y d·ª±ng prompt cho Multi-AI
    const contentHints = options.contentHints || null;
    const hintsText = contentHints
      ? `\n\nC∆° s·ªü t·∫°o c√¢u h·ªèi (t√≥m t·∫Øt tr∆∞·ªõc khi √¥n):\n- Ti√™u ƒë·ªÅ: ${contentHints.title || topicInfo.title}\n- T√≥m t·∫Øt: ${contentHints.summary || ""}\n- Key points: ${(contentHints.keyPoints || []).join(", ")}`
      : "";

    // S·ª≠ d·ª•ng contentHints title n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng topicInfo.title
    const finalTitle = contentHints?.title || topicInfo.title;
    const finalDescription = contentHints?.summary || topicInfo.description;

    const prompt = `
B·∫°n l√† chuy√™n gia v·ªÅ TRI·∫æT H·ªåC M√°c-L√™-Nin. H√£y t·∫°o 10 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ ch·ªß ƒë·ªÅ "${finalTitle}" v·ªõi ƒë·ªô kh√≥ c·∫•p ƒë·ªô ${difficulty}/5.${hintsText}

‚ö†Ô∏è QUAN TR·ªåNG: CH·ªà T·∫¨P TRUNG V√ÄO TRI·∫æT H·ªåC M√ÅC-L√ä-NIN, KH√îNG PH·∫¢I KINH T·∫æ CH√çNH TR·ªä!
üéØ TITLE PH·∫¢I L√Ä: "${finalTitle}" - KH√îNG ƒê∆Ø·ª¢C THAY ƒê·ªîI!

Ch·ªß ƒë·ªÅ: ${finalTitle}
M√¥ t·∫£: ${finalDescription}
T·ª´ kh√≥a quan tr·ªçng: ${topicInfo.keywords.join(", ")}

Y√™u c·∫ßu:
- ƒê√∫ng 10 c√¢u h·ªèi tr·∫Øc nghi·ªám (multiple choice)
- M·ªói c√¢u c√≥ 4 ƒë√°p √°n (A, B, C, D)
- N·ªôi dung CH·ªà V·ªÄ TRI·∫æT H·ªåC M√°c-L√™-Nin (duy v·∫≠t bi·ªán ch·ª©ng, nh·∫≠n th·ª©c lu·∫≠n, quy lu·∫≠t tri·∫øt h·ªçc)
- KH√îNG h·ªèi v·ªÅ kinh t·∫ø, gi√° tr·ªã th·∫∑ng d∆∞, t∆∞ b·∫£n, b√≥c l·ªôt
- ƒê·ªô kh√≥ ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${difficulty}
- C√¢u h·ªèi v·ªÅ: quy lu·∫≠t, ph∆∞∆°ng ph√°p lu·∫≠n, nh·∫≠n th·ª©c, th·ª±c ti·ªÖn, √Ω th·ª©c
- Th·ªùi gian l√†m m·ªói c√¢u: 30 gi√¢y

üö® Y√äU C·∫¶U C·ª∞C K·ª≤ QUAN TR·ªåNG V·ªÄ PH√ÇN B·ªê ƒê√ÅP √ÅN:
‚ùå TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c t·∫°o t·∫•t c·∫£ c√¢u h·ªèi c√≥ c√πng ƒë√°p √°n ƒë√∫ng (v√≠ d·ª•: t·∫•t c·∫£ ƒë·ªÅu A)
‚ùå KH√îNG ƒë∆∞·ª£c c√≥ h∆°n 4 c√¢u c√πng ƒë√°p √°n ƒë√∫ng
‚úÖ B·∫ÆT BU·ªòC: Ph√¢n b·ªë ƒë√°p √°n ƒë√∫ng ƒë·ªÅu gi·ªØa A, B, C, D
‚úÖ V√≠ d·ª• ph√¢n b·ªë ƒê√öNG: A:3 c√¢u, B:2 c√¢u, C:3 c√¢u, D:2 c√¢u
‚úÖ Ho·∫∑c: A:2 c√¢u, B:3 c√¢u, C:2 c√¢u, D:3 c√¢u
‚úÖ ƒê√°p √°n d·ª±a tr√™n KI·∫æN TH·ª®C CH√çNH X√ÅC c·ªßa tri·∫øt h·ªçc M√°c-L√™-Nin

üîç KI·ªÇM TRA TR∆Ø·ªöC KHI TR·∫¢ V·ªÄ:
1. ƒê·∫øm s·ªë c√¢u c√≥ ƒë√°p √°n A, B, C, D
2. ƒê·∫£m b·∫£o kh√¥ng c√≥ ƒë√°p √°n n√†o qu√° 4 c√¢u
3. ƒê·∫£m b·∫£o ph√¢n b·ªë t∆∞∆°ng ƒë·ªëi ƒë·ªÅu (sai l·ªách kh√¥ng qu√° 2 c√¢u)

‚ö†Ô∏è CH·ªà tr·∫£ v·ªÅ k·∫øt qu·∫£ ·ªü ƒë·ªãnh d·∫°ng JSON. KH√îNG th√™m b·∫•t k·ª≥ d√≤ng ch·ªØ n√†o tr∆∞·ªõc/sau.

{
  "title": "${finalTitle}",
  "questions": [
    {
      "type": "multiple_choice",
      "content": "N·ªôi dung c√¢u h·ªèi...",
      "options": ["A. ƒê√°p √°n A", "B. ƒê√°p √°n B", "C. ƒê√°p √°n C", "D. ƒê√°p √°n D"],
      "correctAnswer": "A. ƒê√°p √°n A",
      "score": 10,
      "timeLimit": 30
    }
  ]
}`;

    // Khai b√°o lessonData variable
    let lessonData;

    console.log(
      "üîÑ Generating Marxist lesson with Multi-AI (optimized for speed)..."
    );
    const aiResult = await multiAiService.generateJsonContent(prompt, {
      strategy: "weighted", // Load balance between providers
      maxRetries: 2, // ‚ö° Reduce retries for speed
      maxProviderRetries: 2, // ‚ö° Reduce provider retries
      timeout: 45000, // ‚ö° 45s timeout instead of default
    });

    if (!aiResult.success) {
      // N·∫øu t·∫•t c·∫£ AI APIs th·∫•t b·∫°i, return error ƒë·ªÉ FE c√≥ th·ªÉ retry
      console.error("‚ùå All AI APIs failed!");
      console.log("AI failure details:", aiResult.loadBalancer);

      return {
        success: false,
        statusCode: 503,
        message: "T·∫•t c·∫£ AI APIs ƒë·ªÅu th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c nh·∫•n n√∫t t·∫°o b√†i h·ªçc m·ªõi.",
        error: "AI_GENERATION_FAILED",
        retryable: true
      };
    }

    lessonData = aiResult.data;
    console.log(
      `‚úÖ Using AI-generated lesson data from ${aiResult.provider}`
    );

    // Log load balancer stats
    if (aiResult.loadBalancer) {
      console.log("üìä Load balancer stats:", {
        provider: aiResult.provider,
        strategy: aiResult.loadBalancer.strategy,
        totalProviders: aiResult.loadBalancer.totalProviders,
      });
    }

    // Validate lesson data
    if (!lessonData || !lessonData.questions) {
      console.error("‚ùå Invalid lesson data:", lessonData);
      return {
        success: false,
        statusCode: 500,
        message: "Lesson data kh√¥ng h·ª£p l·ªá",
      };
    }

    console.log(`üìä Lesson data: ${lessonData.questions.length} questions`);

    // Validate s·ªë l∆∞·ª£ng c√¢u h·ªèi (flexible cho demo)
    if (lessonData.questions.length === 0) {
      return {
        success: false,
        statusCode: 500,
        message: "Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong b√†i h·ªçc",
      };
    }

    // Warn n·∫øu kh√¥ng ph·∫£i 10 c√¢u nh∆∞ng v·∫´n cho ph√©p t·∫°o
    if (lessonData.questions.length !== 10) {
      console.warn(
        `‚ö†Ô∏è Expected 10 questions, got ${lessonData.questions.length}`
      );
    }

    // ‚ö° PERFORMANCE: Parallel find/create Topic, Level, Skill with caching
    console.log("üìã Finding or creating Topic, Level, Skill (parallel)...");

    const [topicDoc, levelDoc, skillDoc] = await Promise.all([
      // Topic - cache this
      cacheService.getOrSet('marxist_topic_doc', async () => {
        let doc = await Topic.findOne({ name: "Marxist Philosophy" });
        if (!doc) {
          console.log("üîß Creating Marxist Philosophy topic...");
          doc = await Topic.create({
            name: "Marxist Philosophy",
            description: "Tri·∫øt h·ªçc M√°c-L√™-Nin: duy v·∫≠t bi·ªán ch·ª©ng, nh·∫≠n th·ª©c lu·∫≠n, quy lu·∫≠t tri·∫øt h·ªçc",
            isActive: true,
          });
        }
        return doc;
      }, 300), // Cache 5 minutes

      // Level - cache this  
      cacheService.getOrSet('marxist_level_doc', async () => {
        let doc = await Level.findOne({ name: "marxist_intermediate" });
        if (!doc) {
          console.log("üîß Creating marxist_intermediate level...");
          const lastLevel = await Level.findOne().sort({ order: -1 });
          const nextOrder = lastLevel ? lastLevel.order + 1 : 1;

          doc = await Level.create({
            name: "marxist_intermediate",
            description: "Tr√¨nh ƒë·ªô trung c·∫•p Marxist",
            order: nextOrder,
            minScoreRequired: 70,
            minUserLevel: 1,
            minLessonPassed: 0,
            maxScore: 100,
            timeLimit: 300,
            isActive: true,
          });
          console.log(`‚úÖ Created level with order: ${nextOrder}`);
        }
        return doc;
      }, 300), // Cache 5 minutes

      // Skill - cache this
      cacheService.getOrSet('marxist_skill_doc', async () => {
        let doc = await Skill.findOne({ name: "marxist_philosophy" });
        if (!doc) {
          console.log("üîß Creating marxist_philosophy skill...");
          doc = await Skill.create({
            name: "marxist_philosophy",
            description: "Tri·∫øt h·ªçc M√°c-L√™-Nin: ph∆∞∆°ng ph√°p lu·∫≠n, nh·∫≠n th·ª©c lu·∫≠n, quy lu·∫≠t bi·ªán ch·ª©ng",
            supportedTypes: ["multiple_choice"],
            isActive: true,
          });
        }
        return doc;
      }, 300) // Cache 5 minutes
    ]);

    // Validate t·∫•t c·∫£ ƒë·ªÅu t·ªìn t·∫°i
    if (!topicDoc || !levelDoc || !skillDoc) {
      console.error("‚ùå Failed to create required models:", {
        topicDoc: !!topicDoc,
        levelDoc: !!levelDoc,
        skillDoc: !!skillDoc,
      });
      return {
        success: false,
        statusCode: 500,
        message: "Kh√¥ng th·ªÉ t·∫°o Topic, Level, ho·∫∑c Skill c·∫ßn thi·∫øt",
      };
    }

    console.log("‚úÖ Topic, Level, Skill ready:", {
      topic: topicDoc.name,
      level: levelDoc.name,
      skill: skillDoc.name,
    });

    // ‚úÖ IMPROVED: Better validation for correct answers
    const normalizeCorrectAnswer = (question, questionIndex) => {
      try {
        const options = Array.isArray(question.options) ? question.options : [];
        let answer = question.correctAnswer;

        console.log(`üîç Question ${questionIndex + 1}: "${question.content?.substring(0, 50)}..."`);
        console.log(`üéØ AI provided answer: "${answer}"`);
        console.log(`üìù Available options:`, options);

        if (!options.length) {
          console.warn(`‚ö†Ô∏è Question ${questionIndex + 1}: No options available!`);
          return question.correctAnswer;
        }

        // N·∫øu answer l√† s·ªë (1-4)
        if (typeof answer === "number") {
          const idx = Math.max(0, Math.min(options.length - 1, answer - 1));
          const normalizedAnswer = options[idx];
          console.log(`üî¢ Normalized from number ${answer} to: "${normalizedAnswer}"`);
          return normalizedAnswer;
        }

        if (typeof answer === "string") {
          const trimmed = answer.trim();

          // ‚úÖ PRIORITY 1: Exact match first (most reliable)
          const exactMatch = options.find((opt) => opt === trimmed);
          if (exactMatch) {
            console.log(`‚úÖ Exact match found: "${exactMatch}"`);
            return exactMatch;
          }

          // ‚úÖ PRIORITY 2: Letter match (A, B, C, D)
          const letterMatch = trimmed.match(/^[A-Da-d]$/);
          if (letterMatch) {
            const idx = trimmed.toUpperCase().charCodeAt(0) - 65; // A->0
            if (idx >= 0 && idx < options.length) {
              const normalizedAnswer = options[idx];
              console.log(`üî§ Letter match ${trimmed.toUpperCase()} -> "${normalizedAnswer}"`);
              return normalizedAnswer;
            }
          }

          // ‚úÖ PRIORITY 3: Prefix match (A., A), etc.)
          const letterPrefix = trimmed.match(/^([A-Da-d])[\.)\-\s]/);
          if (letterPrefix) {
            const idx = letterPrefix[1].toUpperCase().charCodeAt(0) - 65;
            if (idx >= 0 && idx < options.length) {
              const normalizedAnswer = options[idx];
              console.log(`üè∑Ô∏è Prefix match ${letterPrefix[1]} -> "${normalizedAnswer}"`);
              return normalizedAnswer;
            }
          }

          // ‚úÖ PRIORITY 4: Content matching (remove prefix and compare)
          const normalizeText = (s) => String(s).replace(/^\s*[A-Da-d][\.)\-]\s*/, "").trim().toLowerCase();
          const normalizedAnswerText = normalizeText(trimmed);

          const contentMatch = options.find((opt) => {
            const normalizedOpt = normalizeText(opt);
            return normalizedOpt === normalizedAnswerText;
          });

          if (contentMatch) {
            console.log(`üìÑ Content match found: "${contentMatch}"`);
            return contentMatch;
          }

          // ‚ö†Ô∏è WARNING: No match found
          console.warn(`‚ö†Ô∏è Question ${questionIndex + 1}: No match found for answer "${trimmed}"`);
          console.warn(`ü§î Available options:`, options.map((opt, i) => `${String.fromCharCode(65 + i)}. ${opt}`));
        }

        // ‚ùå FALLBACK: Return first option but log warning
        console.warn(`‚ùå Question ${questionIndex + 1}: Using fallback (first option)`);
        return options[0];
      } catch (e) {
        console.error(`üí• Error normalizing answer for question ${questionIndex + 1}:`, e.message);
        return question.correctAnswer;
      }
    };

    const processedQuestions = lessonData.questions.map((q, index) => {
      const normalized = {
        ...q,
        type: "multiple_choice",
        timeLimit: 30,
        score: 100,
      };

      const normalizedAnswer = normalizeCorrectAnswer(normalized, index);

      return {
        ...normalized,
        skill: skillDoc._id,
        correctAnswer: normalizedAnswer,
      };
    });

    console.log("üîç VALIDATION: Checking all processed questions for correctness...");

    // ‚úÖ ADD: Detailed validation for each question
    const questionValidationIssues = [];
    processedQuestions.forEach((q, index) => {
      const options = q.options || [];
      const correctAnswer = q.correctAnswer;

      // Check if correctAnswer exists in options
      const answerExists = options.includes(correctAnswer);

      if (!answerExists) {
        questionValidationIssues.push({
          questionIndex: index + 1,
          content: q.content?.substring(0, 50) + "...",
          correctAnswer,
          options,
          issue: "Correct answer not found in options"
        });
      }

      console.log(`Question ${index + 1}: ‚úÖ Answer "${correctAnswer}" ${answerExists ? 'EXISTS' : '‚ùå NOT FOUND'} in options`);
    });

    // ‚ö†Ô∏è Log validation issues
    if (questionValidationIssues.length > 0) {
      console.warn(`‚ö†Ô∏è FOUND ${questionValidationIssues.length} VALIDATION ISSUES:`);
      questionValidationIssues.forEach(issue => {
        console.warn(`‚ùå Question ${issue.questionIndex}: ${issue.issue}`);
        console.warn(`   Content: ${issue.content}`);
        console.warn(`   Correct Answer: "${issue.correctAnswer}"`);
        console.warn(`   Options:`, issue.options);
      });

      // ‚ùå STRICT MODE: Return error if any validation fails
      return {
        success: false,
        statusCode: 400,
        message: `AI generated invalid questions: ${questionValidationIssues.length} questions have incorrect answer mapping`,
        validationIssues: questionValidationIssues,
        retryable: true
      };
    }

    // üî• NEW: Check for answer distribution concentration (main fix)
    console.log("üéØ CHECKING ANSWER DISTRIBUTION for concentration...");

    const validateAnswerConcentration = (questions) => {
      const distribution = { A: 0, B: 0, C: 0, D: 0, Unknown: 0 };

      questions.forEach(q => {
        const answer = q.correctAnswer || "";
        const match = answer.match(/^([A-Da-d])/);
        const letter = match ? match[1].toUpperCase() : "Unknown";

        if (distribution[letter] !== undefined) {
          distribution[letter]++;
        } else {
          distribution.Unknown++;
        }
      });

      console.log(`üìä Answer Distribution: A=${distribution.A}, B=${distribution.B}, C=${distribution.C}, D=${distribution.D}, Unknown=${distribution.Unknown}`);

      // üö® CRITICAL: Check for concentration issues
      const totalQuestions = questions.length;
      const maxCount = Math.max(distribution.A, distribution.B, distribution.C, distribution.D);
      const minCount = Math.min(distribution.A, distribution.B, distribution.C, distribution.D);

      // Issues to check:
      const issues = [];

      // 1. Too concentrated on one answer (e.g., all 10 questions are A)
      if (maxCount >= 7) {
        const dominantLetter = Object.keys(distribution).find(key => distribution[key] === maxCount);
        issues.push(`Too concentrated: ${maxCount}/${totalQuestions} questions have answer ${dominantLetter}`);
      }

      // 2. All answers are the same (worst case)
      if (maxCount === totalQuestions) {
        const dominantLetter = Object.keys(distribution).find(key => distribution[key] === maxCount);
        issues.push(`CRITICAL: All ${totalQuestions} questions have the same answer ${dominantLetter}!`);
      }

      // 3. Too uneven distribution
      if (maxCount - minCount > 5) {
        issues.push(`Too uneven: difference between max (${maxCount}) and min (${minCount}) is ${maxCount - minCount}`);
      }

      // 4. Unknown/invalid answers
      if (distribution.Unknown > 0) {
        issues.push(`${distribution.Unknown} questions have invalid answer format`);
      }

      const isValid = issues.length === 0;

      return {
        isValid,
        distribution,
        issues,
        maxCount,
        minCount,
        totalQuestions
      };
    };

    // Run concentration validation
    const concentrationCheck = validateAnswerConcentration(processedQuestions);

    if (!concentrationCheck.isValid) {
      console.error(`üö® ANSWER CONCENTRATION ISSUES DETECTED:`);
      concentrationCheck.issues.forEach(issue => {
        console.error(`   ‚ùå ${issue}`);
      });

      // üîÑ CRITICAL: Return error for concentration issues (AI needs retry)
      return {
        success: false,
        statusCode: 400,
        message: `AI generated poor answer distribution: ${concentrationCheck.issues.join(', ')}`,
        concentrationIssues: {
          distribution: concentrationCheck.distribution,
          issues: concentrationCheck.issues,
          severity: concentrationCheck.maxCount === concentrationCheck.totalQuestions ? 'CRITICAL' : 'HIGH'
        },
        retryable: true,
        error: "ANSWER_CONCENTRATION_FAILED"
      };
    }

    console.log("‚úÖ Answer concentration validation passed!");
    console.log("‚úÖ All validations passed - proceeding with lesson creation");

    // ‚úÖ IMPROVED: Validate answer distribution and retry if needed
    console.log("üîç Validating AI-generated answer distribution...");

    // Function to check if answer distribution is balanced
    const validateAnswerDistribution = (questions) => {
      const distribution = { A: 0, B: 0, C: 0, D: 0, Unknown: 0 };

      questions.forEach(q => {
        const answer = q.correctAnswer || "";
        const match = answer.match(/^([A-Da-d])/);
        const letter = match ? match[1].toUpperCase() : "Unknown";

        if (distribution[letter] !== undefined) {
          distribution[letter]++;
        } else {
          distribution.Unknown++;
        }
      });

      // Check validation criteria
      const maxCount = Math.max(distribution.A, distribution.B, distribution.C, distribution.D);
      const minCount = Math.min(distribution.A, distribution.B, distribution.C, distribution.D);
      const hasUnknown = distribution.Unknown > 0;
      const tooConcentrated = maxCount > 4; // Kh√¥ng ƒë∆∞·ª£c qu√° 4 c√¢u c√πng ƒë√°p √°n
      const tooUneven = maxCount - minCount > 3; // Ch√™nh l·ªách kh√¥ng qu√° 3

      console.log(`üìä Distribution: A=${distribution.A}, B=${distribution.B}, C=${distribution.C}, D=${distribution.D}, Unknown=${distribution.Unknown}`);

      const isValid = !hasUnknown && !tooConcentrated && !tooUneven;

      return {
        isValid,
        distribution,
        issues: [
          hasUnknown && "Some answers have invalid format",
          tooConcentrated && `Too concentrated: ${maxCount} questions have same answer`,
          tooUneven && `Too uneven: max-min difference is ${maxCount - minCount}`
        ].filter(Boolean)
      };
    };

    // Validate and log distribution
    const validation = validateAnswerDistribution(processedQuestions);

    if (validation.isValid) {
      console.log("‚úÖ Answer distribution is well-balanced");
    } else {
      console.log("‚ö†Ô∏è Answer distribution issues:", validation.issues);
      console.log("üìù Proceeding anyway - may improve with more AI training");
    }

    // T·∫°o lesson
    console.log("üìù Creating lesson document...");
    const lesson = await Lesson.create({
      title: lessonData.title || `B√†i h·ªçc ${topicInfo.title}`,
      topic: topicDoc._id,
      level: levelDoc._id,
      skills: [skillDoc._id],
      maxScore: lessonData.questions.length * 100, // 100 ƒëi·ªÉm m·ªói c√¢u
      questions: [],
      isActive: true,
    });

    console.log("‚úÖ Lesson created:", lesson._id);

    // ‚ö° PERFORMANCE: Batch create questions instead of one-by-one
    console.log(`üîÑ Batch creating ${processedQuestions.length} questions...`);

    // Prepare all question data for batch insert
    const questionsToInsert = processedQuestions.map(qData => ({
      lessonId: lesson._id,
      skill: qData.skill,
      type: qData.type,
      content: qData.content,
      options: qData.options || [],
      correctAnswer: qData.correctAnswer,
      score: qData.score || 100,
      timeLimit: qData.timeLimit || 30,
    }));

    try {
      // ‚ö° Batch insert all questions at once
      const questions = await Question.insertMany(questionsToInsert, {
        ordered: true // Stop on first error
      });

      const questionIds = questions.map(q => q._id);
      console.log(`‚úÖ Batch created ${questions.length} questions`);

      // ‚ö° Update lesson with question IDs (single operation)
      lesson.questions = questionIds;
      await lesson.save();

    } catch (error) {
      console.error(`‚ùå Failed to batch create questions:`, error.message);
      // Rollback: delete the lesson if questions failed
      await Lesson.findByIdAndDelete(lesson._id);
      throw new Error(`Question creation failed: ${error.message}`);
    }

    // ‚ö° PERFORMANCE: Parallel create learning path + update topic stats + send notification
    const pathOrder = await getNextMarxistOrder(userId);
    const questionIds = lesson.questions; // From batch creation above

    const [learningPath] = await Promise.all([
      // Create learning path
      MarxistLearningPath.create({
        userId: user._id,
        lessonId: lesson._id,
        source: "ai_generated_marxist",
        marxistTopic: topicId,
        difficultyLevel: difficulty,
        previousScore: analysis.previousScore || 0,
        recommendedReason: analysis.reason,
        order: pathOrder,
      }),

      // Update topic stats (don't wait for this)
      MarxistTopic.findByIdAndUpdate(topicId, {
        $inc: { totalLessonsGenerated: 1 },
      }).catch(err => console.warn('Topic stats update failed:', err.message)),

      // Send notification (don't wait for this)
      NotificationService.createNotification(userId, {
        title: "üìö B√†i h·ªçc M√°c-L√™-Nin m·ªõi ƒë√£ s·∫µn s√†ng!",
        message: `AI ƒë√£ t·∫°o b√†i h·ªçc v·ªÅ "${topicInfo.title}" v·ªõi ${questionIds.length} c√¢u h·ªèi. H√£y v√†o h·ªçc ngay!`,
        type: "ai_generated",
        link: "/philosophy",
      }).catch(err => console.warn('Notification failed:', err.message))
    ]);

    return {
      success: true,
      statusCode: 201,
      message: "T·∫°o b√†i h·ªçc tri·∫øt h·ªçc M√°c-L√™-Nin th√†nh c√¥ng",
      lesson: {
        lessonId: lesson._id,
        title: lesson.title,
        topic: topicInfo.title,
        difficultyLevel: difficulty,
        questionCount: questionIds.length,
        maxScore: lesson.maxScore,
        createdAt: lesson.createdAt,
      },
      learningPath: {
        pathId: learningPath._id,
        order: pathOrder,
        marxistTopic: {
          id: topicInfo._id,
          name: topicInfo.name,
          title: topicInfo.title,
        },
        recommendedReason: analysis.reason,
      },
    };
  } catch (error) {
    console.error("Error in _generateMarxistLessonInternal:", error);
    throw error; // Re-throw ƒë·ªÉ rate limiter x·ª≠ l√Ω
  }
};

/**
 * Test answer distribution concentration specifically
 * @param {string} topicName - Topic name to test
 * @param {number} difficulty - Difficulty level (1-5)
 * @returns {Object} Test results focusing on answer distribution
 */
const testAnswerDistribution = async (topicName = "duy_vat_bien_chung", difficulty = 2) => {
  try {
    console.log(`üéØ Testing answer distribution for topic: ${topicName}, difficulty: ${difficulty}`);

    // Find topic
    const topicInfo = await MarxistTopic.findOne({ name: topicName, isActive: true });
    if (!topicInfo) {
      return {
        success: false,
        message: `Topic "${topicName}" not found`
      };
    }

    // Test multiple runs to check consistency
    const testRuns = [];
    const providers = ['gemini', 'grok4'];

    for (const provider of providers) {
      console.log(`ü§ñ Testing ${provider} for answer distribution...`);

      try {
        // Create stricter prompt focused on distribution
        const prompt = `
B·∫°n l√† chuy√™n gia v·ªÅ TRI·∫æT H·ªåC M√°c-L√™-Nin. T·∫°o 5 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ "${topicInfo.title}".

üö® Y√äU C·∫¶U C·ª∞C K·ª≤ QUAN TR·ªåNG:
‚ùå TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c t·∫°o t·∫•t c·∫£ c√¢u c√≥ c√πng ƒë√°p √°n ƒë√∫ng
‚úÖ B·∫ÆT BU·ªòC: Ph√¢n b·ªë ƒë√°p √°n A, B, C, D ƒë·ªÅu nhau
‚úÖ V√≠ d·ª•: C√¢u 1: A ƒë√∫ng, C√¢u 2: B ƒë√∫ng, C√¢u 3: C ƒë√∫ng, C√¢u 4: D ƒë√∫ng, C√¢u 5: A ƒë√∫ng

{
  "title": "${topicInfo.title}",
  "questions": [
    {
      "content": "C√¢u h·ªèi...",
      "options": ["A. ƒê√°p √°n A", "B. ƒê√°p √°n B", "C. ƒê√°p √°n C", "D. ƒê√°p √°n D"],
      "correctAnswer": "A. ƒê√°p √°n A"
    }
  ]
}`;

        const result = await multiAiService.generateJsonContent(prompt, {
          preferredProvider: provider,
          maxRetries: 1
        });

        if (result.success && result.data?.questions) {
          // Analyze distribution
          const distribution = { A: 0, B: 0, C: 0, D: 0, Unknown: 0 };

          result.data.questions.forEach(q => {
            const answer = q.correctAnswer || "";
            const match = answer.match(/^([A-Da-d])/);
            const letter = match ? match[1].toUpperCase() : "Unknown";

            if (distribution[letter] !== undefined) {
              distribution[letter]++;
            } else {
              distribution.Unknown++;
            }
          });

          const totalQuestions = result.data.questions.length;
          const maxCount = Math.max(distribution.A, distribution.B, distribution.C, distribution.D);
          const isConcentrated = maxCount >= Math.ceil(totalQuestions * 0.7); // 70% threshold
          const isAllSame = maxCount === totalQuestions;

          testRuns.push({
            provider,
            success: true,
            questionCount: totalQuestions,
            distribution,
            maxCount,
            isConcentrated,
            isAllSame,
            concentrationPercentage: Math.round((maxCount / totalQuestions) * 100),
            issues: [
              isAllSame && `ALL ${totalQuestions} questions have same answer`,
              isConcentrated && `${maxCount}/${totalQuestions} (${Math.round((maxCount / totalQuestions) * 100)}%) questions have same answer`,
              distribution.Unknown > 0 && `${distribution.Unknown} questions have invalid answers`
            ].filter(Boolean)
          });

          console.log(`${provider} result:`, {
            distribution,
            concentrated: isConcentrated,
            allSame: isAllSame
          });

        } else {
          testRuns.push({
            provider,
            success: false,
            error: result.error || 'Generation failed'
          });
        }

      } catch (error) {
        testRuns.push({
          provider,
          success: false,
          error: error.message
        });
      }
    }

    // Analyze results
    const analysis = {
      totalRuns: testRuns.length,
      successfulRuns: testRuns.filter(r => r.success).length,
      concentrationIssues: testRuns.filter(r => r.success && r.isConcentrated).length,
      criticalIssues: testRuns.filter(r => r.success && r.isAllSame).length,
      bestProvider: null,
      worstProvider: null
    };

    // Find best and worst providers
    const successfulRuns = testRuns.filter(r => r.success);
    if (successfulRuns.length > 0) {
      analysis.bestProvider = successfulRuns.reduce((best, current) =>
        !best || current.maxCount < best.maxCount ? current : best
      ).provider;

      analysis.worstProvider = successfulRuns.reduce((worst, current) =>
        !worst || current.maxCount > worst.maxCount ? current : worst
      ).provider;
    }

    return {
      success: true,
      topic: {
        name: topicInfo.name,
        title: topicInfo.title
      },
      testRuns,
      analysis,
      recommendations: {
        preferredProvider: analysis.bestProvider,
        issues: analysis.concentrationIssues > 0 ?
          `${analysis.concentrationIssues}/${analysis.totalRuns} runs had concentration issues` :
          'No concentration issues detected',
        criticalIssues: analysis.criticalIssues > 0 ?
          `${analysis.criticalIssues}/${analysis.totalRuns} runs had ALL SAME ANSWER issue` :
          'No critical issues detected'
      }
    };

  } catch (error) {
    console.error("Error testing answer distribution:", error);
    return {
      success: false,
      message: "Test failed: " + error.message
    };
  }
};

/**
 * Test AI generation accuracy and validate answers
 * @param {string} topicName - Topic name to test
 * @param {number} difficulty - Difficulty level (1-5)
 * @returns {Object} Test results
 */
const testAiGenerationAccuracy = async (topicName = "duy_vat_bien_chung", difficulty = 2) => {
  try {
    console.log(`üß™ Testing AI generation accuracy for topic: ${topicName}, difficulty: ${difficulty}`);

    // Find topic
    const topicInfo = await MarxistTopic.findOne({ name: topicName, isActive: true });
    if (!topicInfo) {
      return {
        success: false,
        message: `Topic "${topicName}" not found`
      };
    }

    // Create test prompt
    const prompt = `
B·∫°n l√† chuy√™n gia v·ªÅ TRI·∫æT H·ªåC M√°c-L√™-Nin. H√£y t·∫°o 3 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ ch·ªß ƒë·ªÅ "${topicInfo.title}" v·ªõi ƒë·ªô kh√≥ c·∫•p ƒë·ªô ${difficulty}/5.

‚ö†Ô∏è QUAN TR·ªåNG: CH·ªà T·∫¨P TRUNG V√ÄO TRI·∫æT H·ªåC M√ÅC-L√ä-NIN, KH√îNG PH·∫¢I KINH T·∫æ CH√çNH TR·ªä!

Ch·ªß ƒë·ªÅ: ${topicInfo.title}
M√¥ t·∫£: ${topicInfo.description}
T·ª´ kh√≥a quan tr·ªçng: ${topicInfo.keywords.join(", ")}

Y√™u c·∫ßu:
- ƒê√∫ng 3 c√¢u h·ªèi tr·∫Øc nghi·ªám (multiple choice) 
- M·ªói c√¢u c√≥ 4 ƒë√°p √°n (A, B, C, D)
- N·ªôi dung CH·ªà V·ªÄ TRI·∫æT H·ªåC M√°c-L√™-Nin (duy v·∫≠t bi·ªán ch·ª©ng, nh·∫≠n th·ª©c lu·∫≠n, quy lu·∫≠t tri·∫øt h·ªçc)
- KH√îNG h·ªèi v·ªÅ kinh t·∫ø, gi√° tr·ªã th·∫∑ng d∆∞, t∆∞ b·∫£n, b√≥c l·ªôt
- ƒê·ªô kh√≥ ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${difficulty}
- ƒê√°p √°n ƒë√∫ng ph·∫£i D·ª∞A V√ÄO KI·∫æN TH·ª®C CH√çNH X√ÅC c·ªßa tri·∫øt h·ªçc M√°c-L√™-Nin

‚ö†Ô∏è CH·ªà tr·∫£ v·ªÅ k·∫øt qu·∫£ ·ªü ƒë·ªãnh d·∫°ng JSON. KH√îNG th√™m b·∫•t k·ª≥ d√≤ng ch·ªØ n√†o tr∆∞·ªõc/sau.

{
  "title": "${topicInfo.title}",
  "questions": [
    {
      "type": "multiple_choice",
      "content": "N·ªôi dung c√¢u h·ªèi...", 
      "options": ["A. ƒê√°p √°n A", "B. ƒê√°p √°n B", "C. ƒê√°p √°n C", "D. ƒê√°p √°n D"],
      "correctAnswer": "A. ƒê√°p √°n A",
      "explanation": "Gi·∫£i th√≠ch chi ti·∫øt t·∫°i sao ƒë√°p √°n n√†y ƒë√∫ng..."
    }
  ]
}`;

    // Test with multiple AI providers
    const results = {};

    // Test Gemini
    try {
      console.log("ü§ñ Testing with Gemini...");
      const geminiResult = await multiAiService.generateJsonContent(prompt, {
        preferredProvider: "gemini"
      });
      results.gemini = geminiResult;
    } catch (error) {
      results.gemini = { success: false, error: error.message };
    }

    // Test Grok4 
    try {
      console.log("ü§ñ Testing with Grok4...");
      const grokResult = await multiAiService.generateJsonContent(prompt, {
        preferredProvider: "grok4"
      });
      results.grok4 = grokResult;
    } catch (error) {
      results.grok4 = { success: false, error: error.message };
    }

    // Analyze results
    const analysis = {
      totalProviders: Object.keys(results).length,
      successfulProviders: 0,
      questionAnalysis: {},
      validationIssues: []
    };

    Object.entries(results).forEach(([provider, result]) => {
      if (result.success && result.data?.questions) {
        analysis.successfulProviders++;

        console.log(`\nüîç Analyzing ${provider} results:`);

        result.data.questions.forEach((q, index) => {
          const questionKey = `question_${index + 1}`;
          if (!analysis.questionAnalysis[questionKey]) {
            analysis.questionAnalysis[questionKey] = {
              content: q.content?.substring(0, 100) + "...",
              providerAnswers: {},
              options: q.options
            };
          }

          // Store this provider's answer
          analysis.questionAnalysis[questionKey].providerAnswers[provider] = {
            correctAnswer: q.correctAnswer,
            explanation: q.explanation
          };

          // Validate answer exists in options
          const answerExists = q.options?.includes(q.correctAnswer);
          if (!answerExists) {
            analysis.validationIssues.push({
              provider,
              questionIndex: index + 1,
              issue: "Correct answer not found in options",
              correctAnswer: q.correctAnswer,
              options: q.options
            });
          }

          console.log(`  Question ${index + 1}: "${q.content?.substring(0, 50)}..."`);
          console.log(`  Correct Answer: "${q.correctAnswer}" ${answerExists ? '‚úÖ' : '‚ùå'}`);
          console.log(`  Options:`, q.options);
          if (q.explanation) {
            console.log(`  Explanation: ${q.explanation.substring(0, 100)}...`);
          }
        });
      }
    });

    return {
      success: true,
      topic: {
        name: topicInfo.name,
        title: topicInfo.title
      },
      difficulty,
      results,
      analysis,
      summary: {
        totalProviders: analysis.totalProviders,
        successfulProviders: analysis.successfulProviders,
        totalValidationIssues: analysis.validationIssues.length,
        recommendedProvider: analysis.successfulProviders > 0 ?
          Object.keys(results).find(p => results[p].success && analysis.validationIssues.filter(v => v.provider === p).length === 0) ||
          Object.keys(results).find(p => results[p].success) : null
      }
    };

  } catch (error) {
    console.error("Error testing AI generation accuracy:", error);
    return {
      success: false,
      message: "Test failed: " + error.message
    };
  }
};

/**
 * Get generation performance statistics
 * @returns {Object} Performance stats
 */
const getGenerationStats = async () => {
  try {
    // Get queue stats
    const queueStats = aiGenerationQueue.getStats();

    // Get multi-AI stats
    const multiAiStats = multiAiService.getStats();

    // Get cache stats
    const cacheStats = cacheService.getStats();

    // Get recent generation performance from database
    const recentLessons = await Lesson.find({
      createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // Last 24 hours
    }).select('createdAt title').sort({ createdAt: -1 }).limit(50);

    const recentPaths = await MarxistLearningPath.find({
      generatedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // Last 24 hours  
    }).select('generatedAt userId difficultyLevel').sort({ generatedAt: -1 }).limit(100);

    return {
      success: true,
      queue: {
        ...queueStats,
        description: "AI Generation Queue Performance"
      },
      multiAi: {
        ...multiAiStats,
        description: "Multi-AI Load Balancer Stats"
      },
      cache: {
        ...cacheStats,
        description: "Cache Performance Stats"
      },
      database: {
        recentLessons: recentLessons.length,
        recentPaths: recentPaths.length,
        description: "Database Activity (24h)"
      },
      performance: {
        averageGeneration: queueStats.averageProcessingTime || 0,
        queueWaitTime: queueStats.averageWaitTime || 0,
        cacheHitRate: cacheStats.hitRate || 0,
        description: "Overall Performance Metrics"
      }
    };
  } catch (error) {
    console.error("Error getting generation stats:", error);
    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * L·∫•y l·ªô tr√¨nh h·ªçc Marxist c·ªßa user
 * @param {string} userId - User ID
 * @param {Object} options - Query options
 * @returns {Object} Learning path
 */
const getMarxistLearningPath = async (userId, options = {}) => {
  try {
    const { page = 1, limit = 10 } = options;
    const skip = (page - 1) * limit;

    // ƒê·∫øm t·ªïng s·ªë b√†i trong l·ªô tr√¨nh
    let total = await MarxistLearningPath.countDocuments({ userId });

    // ‚ùå REMOVED: Auto-generation moved to client-side to prevent duplicate lessons
    // Client should explicitly call POST /marxist-philosophy/generate-lesson when needed
    if (total === 0) {
      console.log(
        "üìã User m·ªõi ch∆∞a c√≥ b√†i h·ªçc Marxist. Client c·∫ßn g·ªçi generate-lesson API."
      );

      // Ki·ªÉm tra xem c√≥ topic n√†o trong database kh√¥ng
      const availableTopics = await getAllMarxistTopics();
      if (availableTopics.length === 0) {
        return {
          success: false,
          statusCode: 500,
          message:
            "Kh√¥ng c√≥ ch·ªß ƒë·ªÅ Marxist n√†o trong database. Admin c·∫ßn seed d·ªØ li·ªáu tr∆∞·ªõc.",
        };
      }

      // Tr·∫£ v·ªÅ empty learning path v·ªõi th√¥ng b√°o ƒë·ªÉ client g·ªçi generate
      return {
        success: true,
        statusCode: 200,
        message: "Ch∆∞a c√≥ b√†i h·ªçc n√†o. H√£y t·∫°o b√†i h·ªçc ƒë·∫ßu ti√™n!",
        learningPath: [],
        total: 0,
        currentPage: parseInt(page),
        totalPages: 0,
        hasNextPage: false,
        hasPrevPage: false,
        needsFirstLesson: true, // Flag ƒë·ªÉ client bi·∫øt c·∫ßn t·∫°o lesson ƒë·∫ßu ti√™n
        availableTopics: availableTopics.length,
      };
    }

    // L·∫•y d·ªØ li·ªáu l·ªô tr√¨nh
    const pathDocs = await MarxistLearningPath.find({ userId })
      .populate({
        path: "lessonId",
        populate: ["topic", "level"],
      })
      .sort({ order: 1 })
      .skip(skip)
      .limit(limit);

    // ‚ùå OLD: Using Progress table - WRONG for Marxist system
    // const completedLessonIds = (
    //     await Progress.distinct('lessonId', {
    //         userId,
    //         status: 'COMPLETE'
    //     })
    // ).map(id => id.toString());

    // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
    const learningPath = pathDocs.map((doc) => {
      const lesson = doc.lessonId;
      // ‚úÖ NEW: Use MarxistLearningPath.completed field directly
      const isCompleted = doc.completed || false; // Use doc.completed from MarxistLearningPath
      const marxistTopic = doc.marxistTopic;

      return {
        pathId: doc._id,
        lessonId: lesson?._id,
        title: lesson?.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
        marxistTopic: {
          id: marxistTopic?._id,
          name: marxistTopic?.name || "unknown",
          title: marxistTopic?.title || "Kh√¥ng x√°c ƒë·ªãnh",
          description: marxistTopic?.description || "",
        },
        difficultyLevel: doc.difficultyLevel,
        recommendedReason: doc.recommendedReason,
        previousScore: doc.previousScore,
        order: doc.order,
        completed: isCompleted, // ‚úÖ Now uses MarxistLearningPath.completed
        achievedScore: doc.achievedScore,
        completedAt: doc.completedAt,
        status: isCompleted ? "COMPLETE" : "LOCKED",
        createdAt: doc.generatedAt,
      };
    });

    return {
      success: true,
      statusCode: 200,
      message: "L·∫•y l·ªô tr√¨nh h·ªçc Marxist th√†nh c√¥ng",
      learningPath,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        totalItems: total,
        pageSize: limit,
      },
    };
  } catch (error) {
    console.error("Error getting Marxist learning path:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi l·∫•y l·ªô tr√¨nh h·ªçc: " + error.message,
    };
  }
};

/**
 * Ho√†n th√†nh b√†i h·ªçc tri·∫øt h·ªçc M√°c-L√™-Nin v·ªõi lives system
 * @param {string} userId - User ID  
 * @param {string} lessonId - Lesson ID
 * @param {number} score - ƒêi·ªÉm s·ªë (0-100)
 * @param {Array} questionResults - K·∫øt qu·∫£ t·ª´ng c√¢u h·ªèi (optional)
 * @returns {Object} Completion result
 */
const completeMarxistLesson = async (
  userId,
  lessonId,
  score,
  questionResults = []
) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      };
    }

    // Regenerate lives tr∆∞·ªõc n·∫øu c·∫ßn
    await checkAndRegenerateLives(user);

    // Ki·ªÉm tra g√≥i premium
    const now = moment().tz("Asia/Ho_Chi_Minh");
    const activePackage = await UserPackage.findOne({
      user: userId,
      isActive: true,
      endDate: { $gt: now.toDate() },
      paymentStatus: "completed",
    }).populate("package");

    const hasPremium = activePackage?.package?.features || {};
    const unlimitedLives = hasPremium.unlimitedLives || false;

    // Tr·ª´ lives n·∫øu score < 70% v√† kh√¥ng ph·∫£i premium
    let livesDeducted = false;
    if (score < 70 && !unlimitedLives) {
      if (user.lives <= 0) {
        return {
          success: false,
          statusCode: 403,
          message:
            "Kh√¥ng ƒë·ªß l∆∞·ª£t ch∆°i. H√£y ch·ªù lives h·ªìi ph·ª•c ho·∫∑c mua g√≥i premium.",
          needsLives: true,
          currentLives: user.lives,
        };
      }

      user.lives -= 1;
      user.lastLivesRegenerationTime = new Date();
      await user.save();
      livesDeducted = true;

      console.log(
        `üíî Deducted 1 life from user ${userId} (score: ${score}%, lives: ${user.lives})`
      );
    }

    // C·∫≠p nh·∫≠t MarxistLearningPath v·ªõi logic completed d·ª±a v√†o score
    const pathDoc = await MarxistLearningPath.findOneAndUpdate(
      { userId, lessonId },
      {
        completed: score >= 70, // Ch·ªâ completed = true khi score >= 70%
        achievedScore: score,
        completedAt: score >= 70 ? new Date() : null, // Ch·ªâ set completedAt khi th·ª±c s·ª± completed
      },
      { new: true }
    );

    if (!pathDoc) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y b√†i h·ªçc trong l·ªô tr√¨nh Marxist",
      };
    }

    // üìä T·∫†O PROGRESS RECORD (gi·ªëng lesson ti·∫øng Anh)
    const lessonStatus = score >= 70 ? "COMPLETE" : "FAILED";
    const isRetried = false; // TODO: Implement retry tracking if needed

    // üîç VALIDATE v√† FILTER questionResults ƒë·ªÉ ƒë·∫£m b·∫£o schema compliance
    const validQuestionResults = Array.isArray(questionResults)
      ? questionResults
        .filter((result) => {
          // Ch·ªâ gi·ªØ l·∫°i results c√≥ questionId (answer c√≥ th·ªÉ r·ªóng n·∫øu user kh√¥ng ch·ªçn)
          return result && result.questionId;
        })
        .map((result) => ({
          questionId: result.questionId,
          answer: result.answer || "", // Cho ph√©p answer r·ªóng n·∫øu user kh√¥ng ch·ªçn
          isCorrect: result.isCorrect || false, // Default false n·∫øu kh√¥ng c√≥
          score: typeof result.score === "number" ? result.score : 0, // Default 0 n·∫øu kh√¥ng c√≥
          isTimeout: result.isTimeout || false,
          transcription: result.transcription || null,
          feedback: result.feedback || null,
        }))
      : [];

    console.log(
      `üìù Creating Progress record: userId=${userId}, lessonId=${lessonId}, score=${score}, status=${lessonStatus}`
    );
    console.log(
      `üìä Valid questionResults: ${validQuestionResults.length}/${questionResults?.length || 0
      }`
    );

    const progress = await Progress.create({
      userId,
      lessonId,
      score,
      status: lessonStatus,
      isRetried,
      questionResults: validQuestionResults,
    });

    console.log(`‚úÖ Progress record created: ${progress._id}`);

    // üéØ C·ªòNG XP V√Ä KI·ªÇM TRA LEVEL UP
    let earnedXP = 0;
    let leveledUp = false;
    let newLevel = user.userLevel;
    let livesFromLevelUp = 0;

    if (score >= 70) {
      // Ch·ªâ c·ªông XP khi pass
      // T√≠nh XP: ƒëi·ªÉm / 10 (gi·ªëng logic English learning)
      earnedXP = Math.round(score / 10);
      user.xp += earnedXP;

      console.log(
        `‚≠ê User ${userId} earned ${earnedXP} XP (score: ${score}%, total XP: ${user.xp})`
      );

      // Ki·ªÉm tra level up
      const requiredXp = getRequiredXpForLevel(user.userLevel);
      if (user.xp >= requiredXp) {
        const oldLevel = user.userLevel;
        user.userLevel += 1;
        user.xp = 0; // Reset XP v·ªÅ 0
        user.lives = Math.min(user.lives + 1, 5); // +1 life (max 5)

        leveledUp = true;
        newLevel = user.userLevel;
        livesFromLevelUp = 1;

        console.log(
          `üéâ User ${userId} leveled up! ${oldLevel} ‚Üí ${newLevel} (gained 1 life, total: ${user.lives})`
        );

        // G·ª≠i notification level up
        try {
          await NotificationService.createNotification(userId, {
            title: "üéâ Ch√∫c m·ª´ng l√™n c·∫•p!",
            message: `B·∫°n ƒë√£ l√™n Level ${newLevel}! Nh·∫≠n th√™m 1 ‚ù§Ô∏è lives v√† unlock t√≠nh nƒÉng m·ªõi.`,
            type: "level_up",
            link: "/profile",
          });
        } catch (error) {
          console.error("Failed to create level up notification:", error);
        }
      }

      // L∆∞u user v·ªõi XP v√† level m·ªõi
      await user.save();
    }

    // Sau khi PASS: ch·ªâ log (b·ªè logic t·∫°o contentPack)
    if (score >= 70) {
      console.log(`üéØ User ${userId} passed lesson (${score}%). No background generation needed.`);
    }

    return {
      success: true,
      statusCode: 200,
      message:
        score >= 70
          ? leveledUp
            ? `üéâ Ho√†n th√†nh xu·∫•t s·∫Øc! Nh·∫≠n ${earnedXP} XP v√† l√™n Level ${newLevel}!`
            : `‚úÖ Ho√†n th√†nh xu·∫•t s·∫Øc! Nh·∫≠n ${earnedXP} XP. B√†i h·ªçc ƒë√£ completed.`
          : `ƒêi·ªÉm s·ªë: ${score}%. B√†i h·ªçc ch∆∞a completed. ${livesDeducted ? "ƒê√£ tr·ª´ 1 life." : ""
          } H√£y c·ªë g·∫Øng h∆°n!`,
      pathUpdated: true,
      completed: score >= 70,
      // Lives info
      livesDeducted,
      currentLives: user.lives,
      // Score info
      scoreAchieved: score,
      passed: score >= 70,
      // XP & Level info
      earnedXP,
      leveledUp,
      newLevel,
      livesFromLevelUp,
      currentXP: user.xp,
      nextLevelRequiredXP: leveledUp
        ? getRequiredXpForLevel(newLevel)
        : getRequiredXpForLevel(user.userLevel) - user.xp,
      // Progress info
      progressId: progress._id,
      progressStatus: lessonStatus,
    };
  } catch (error) {
    console.error("Error completing Marxist lesson:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi ho√†n th√†nh b√†i h·ªçc: " + error.message,
    };
  }
};

/**
 * L√†m l·∫°i b√†i h·ªçc tri·∫øt h·ªçc M√°c-L√™-Nin
 * @param {string} userId - User ID
 * @param {string} lessonId - Lesson ID  
 * @param {string} pathId - Learning Path ID (optional)
 * @returns {Object} Retry result
 */
const retryMarxistLesson = async (userId, lessonId, pathId = null) => {
  try {
    const user = await User.findById(userId);
    const lesson = await Lesson.findById(lessonId);

    if (!user || !lesson) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c b√†i h·ªçc",
      };
    }

    // Regenerate lives tr∆∞·ªõc n·∫øu c·∫ßn
    await checkAndRegenerateLives(user);

    // Ki·ªÉm tra g√≥i premium
    const now = moment().tz("Asia/Ho_Chi_Minh");
    const activePackage = await UserPackage.findOne({
      user: userId,
      isActive: true,
      endDate: { $gt: now.toDate() },
      paymentStatus: "completed",
    }).populate("package");

    const hasPremium = activePackage?.package?.features || {};
    const unlimitedLives = hasPremium.unlimitedLives || false;

    // N·∫øu kh√¥ng c√≥ quy·ªÅn l·ª£i lives kh√¥ng gi·ªõi h·∫°n th√¨ ph·∫£i ki·ªÉm tra
    if (!unlimitedLives && user.lives <= 0) {
      return {
        success: false,
        statusCode: 403,
        message:
          "Kh√¥ng ƒë·ªß l∆∞·ª£t ch∆°i ƒë·ªÉ l√†m l·∫°i. H√£y ch·ªù lives h·ªìi ph·ª•c ho·∫∑c mua g√≥i premium.",
        needsLives: true,
        currentLives: user.lives,
      };
    }

    // Reset learning path v·ªÅ ch∆∞a ho√†n th√†nh n·∫øu c√≥ pathId
    if (pathId) {
      await MarxistLearningPath.findByIdAndUpdate(pathId, {
        completed: false,
        achievedScore: null,
        completedAt: null,
      });
    } else {
      // N·∫øu kh√¥ng c√≥ pathId, t√¨m path theo lessonId
      await MarxistLearningPath.findOneAndUpdate(
        { userId, lessonId },
        {
          completed: false,
          achievedScore: null,
          completedAt: null,
        }
      );
    }

    // Tr·ª´ lives n·∫øu kh√¥ng ph·∫£i l√† premium
    if (!unlimitedLives) {
      user.lives -= 1;
      user.lastLivesRegenerationTime = new Date();
      await user.save();
      console.log(
        `üíî Deducted 1 life for retry from user ${userId} (lives: ${user.lives})`
      );
    }

    return {
      success: true,
      statusCode: 200,
      message: unlimitedLives
        ? "C√≥ th·ªÉ l√†m l·∫°i b√†i h·ªçc (Premium)"
        : `C√≥ th·ªÉ l√†m l·∫°i b√†i h·ªçc. Lives c√≤n l·∫°i: ${user.lives}`,
      livesDeducted: !unlimitedLives,
      currentLives: user.lives,
      canRetry: true,
    };
  } catch (error) {
    console.error("Error retrying Marxist lesson:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi l√†m l·∫°i b√†i h·ªçc: " + error.message,
    };
  }
};

/**
 * L·∫•y th·ªëng k√™ h·ªçc t·∫≠p Marxist
 * @param {string} userId - User ID
 * @returns {Object} Statistics
 */
const getMarxistStats = async (userId) => {
  try {
    const totalLessons = await MarxistLearningPath.countDocuments({ userId });
    const completedLessons = await MarxistLearningPath.countDocuments({
      userId,
      completed: true,
    });

    // Th·ªëng k√™ theo ch·ªß ƒë·ªÅ
    const topicStats = await MarxistLearningPath.aggregate([
      { $match: { userId: new mongoose.Types.ObjectId(userId) } },
      {
        $lookup: {
          from: "marxisttopics",
          localField: "marxistTopic",
          foreignField: "_id",
          as: "topicInfo",
        },
      },
      {
        $group: {
          _id: "$marxistTopic",
          topicName: { $first: { $arrayElemAt: ["$topicInfo.name", 0] } },
          topicTitle: { $first: { $arrayElemAt: ["$topicInfo.title", 0] } },
          total: { $sum: 1 },
          completed: {
            $sum: { $cond: ["$completed", 1, 0] },
          },
          avgScore: {
            $avg: { $cond: ["$completed", "$achievedScore", null] },
          },
        },
      },
    ]);

    // ƒêi·ªÉm trung b√¨nh t·ªïng th·ªÉ
    const avgScoreResult = await MarxistLearningPath.aggregate([
      {
        $match: {
          userId: new mongoose.Types.ObjectId(userId),
          completed: true,
          achievedScore: { $ne: null },
        },
      },
      {
        $group: {
          _id: null,
          avgScore: { $avg: "$achievedScore" },
        },
      },
    ]);

    const overallAvgScore =
      avgScoreResult.length > 0 ? Math.round(avgScoreResult[0].avgScore) : 0;

    return {
      success: true,
      statusCode: 200,
      message: "L·∫•y th·ªëng k√™ Marxist th√†nh c√¥ng",
      stats: {
        totalLessons,
        completedLessons,
        completionRate:
          totalLessons > 0
            ? Math.round((completedLessons / totalLessons) * 100)
            : 0,
        overallAvgScore,
        topicBreakdown: topicStats.map((stat) => ({
          topicId: stat._id,
          name: stat.topicName || "unknown",
          title: stat.topicTitle || "Kh√¥ng x√°c ƒë·ªãnh",
          total: stat.total,
          completed: stat.completed,
          avgScore: stat.avgScore ? Math.round(stat.avgScore) : 0,
        })),
      },
    };
  } catch (error) {
    console.error("Error getting Marxist stats:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói khi l·∫•y th·ªëng k√™: " + error.message,
    };
  }
};

export default {
  generateMarxistLesson,
  analyzeUserProgress,
  getMarxistLearningPath,
  completeMarxistLesson,
  retryMarxistLesson,
  getMarxistStats,
  getAllMarxistTopics,
  getGenerationStats, // ‚ö° Performance monitoring endpoint
  testAnswerDistribution, // üéØ Test answer concentration
  testAiGenerationAccuracy, // üß™ Test AI accuracy endpoint
}; 
