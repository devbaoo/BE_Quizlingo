import mongoose from 'mongoose';
import MarxistTopic from '../models/marxistTopic.js';
import dotenv from 'dotenv';

dotenv.config();

// K·∫øt n·ªëi database
const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGO_URI || "mongodb://localhost:27017/quizlingo";
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Database connected');
    } catch (error) {
        console.error('‚ùå Database connection error:', error);
        process.exit(1);
    }
};

// D·ªØ li·ªáu ch·ªß ƒë·ªÅ tri·∫øt h·ªçc M√°c-L√™-Nin
const defaultTopics = [
    {
        name: 'duy_vat_bien_chung',
        title: 'Duy v·∫≠t bi·ªán ch·ª©ng',
        description: 'Ph∆∞∆°ng ph√°p lu·∫≠n tri·∫øt h·ªçc M√°c-x√≠t v·ªÅ quy lu·∫≠t bi·∫øn ƒë·ªïi v√† ph√°t tri·ªÉn c·ªßa th·∫ø gi·ªõi',
        keywords: ['duy v·∫≠t', 'bi·ªán ch·ª©ng', 'quy lu·∫≠t', 'nh·∫≠n th·ª©c', 'th·ª±c ti·ªÖn', 'm√¢u thu·∫´n'],
        suggestedDifficulty: 3,
        suggestedQuestionCount: 10,
        displayOrder: 1
    },
    {
        name: 'duy_vat_lich_su',
        title: 'Duy v·∫≠t l·ªãch s·ª≠',
        description: 'Quan ni·ªám duy v·∫≠t v·ªÅ l·ªãch s·ª≠ x√£ h·ªôi v√† quy lu·∫≠t ph√°t tri·ªÉn x√£ h·ªôi',
        keywords: ['l·ªãch s·ª≠', 'x√£ h·ªôi', 'h√¨nh th√°i', 'c∆° s·ªü', 'th∆∞·ª£ng t·∫ßng', '√Ω th·ª©c x√£ h·ªôi'],
        suggestedDifficulty: 4,
        suggestedQuestionCount: 10,
        displayOrder: 2
    },
    {
        name: 'nhan_thuc_luan',
        title: 'Nh·∫≠n th·ª©c lu·∫≠n',
        description: 'L√Ω thuy·∫øt v·ªÅ qu√° tr√¨nh nh·∫≠n th·ª©c th·∫ø gi·ªõi v√† vai tr√≤ c·ªßa th·ª±c ti·ªÖn trong nh·∫≠n th·ª©c',
        keywords: ['nh·∫≠n th·ª©c', 'th·ª±c ti·ªÖn', 'ch√¢n l√Ω', 'ki·∫øn th·ª©c', 'kinh nghi·ªám', 'c·∫£m t√≠nh'],
        suggestedDifficulty: 3,
        suggestedQuestionCount: 10,
        displayOrder: 3
    },
    {
        name: 'quy_luat_mau_thuan',
        title: 'Quy lu·∫≠t m√¢u thu·∫´n',
        description: 'Quy lu·∫≠t th·ªëng nh·∫•t v√† ƒë·∫•u tranh c·ªßa c√°c m·∫∑t ƒë·ªëi l·∫≠p trong s·ª± v·∫≠t',
        keywords: ['m√¢u thu·∫´n', 'ƒë·ªëi l·∫≠p', 'th·ªëng nh·∫•t', 'ƒë·∫•u tranh', 'ph·ªß ƒë·ªãnh', 'chuy·ªÉn h√≥a'],
        suggestedDifficulty: 4,
        suggestedQuestionCount: 10,
        displayOrder: 4
    },
    {
        name: 'quy_luat_luong_chat',
        title: 'Quy lu·∫≠t l∆∞·ª£ng ch·∫•t',
        description: 'Quy lu·∫≠t chuy·ªÉn h√≥a t·ª´ nh·ªØng thay ƒë·ªïi v·ªÅ l∆∞·ª£ng th√†nh thay ƒë·ªïi v·ªÅ ch·∫•t',
        keywords: ['l∆∞·ª£ng', 'ch·∫•t', 'ƒë·ªô', 'b∆∞·ªõc nh·∫£y', 't√≠ch l≈©y', 'chuy·ªÉn h√≥a'],
        suggestedDifficulty: 3,
        suggestedQuestionCount: 10,
        displayOrder: 5
    },
    {
        name: 'quy_luat_phu_dinh',
        title: 'Quy lu·∫≠t ph·ªß ƒë·ªãnh c·ªßa ph·ªß ƒë·ªãnh',
        description: 'Quy lu·∫≠t v·ªÅ s·ª± ph√°t tri·ªÉn theo h√¨nh xo·∫Øn ·ªëc c·ªßa s·ª± v·∫≠t, hi·ªán t∆∞·ª£ng',
        keywords: ['ph·ªß ƒë·ªãnh', 'kh·∫≥ng ƒë·ªãnh', 'xo·∫Øn ·ªëc', 'ph√°t tri·ªÉn', 'ti·∫øn b·ªô', 't∆∞∆°ng lai'],
        suggestedDifficulty: 4,
        suggestedQuestionCount: 10,
        displayOrder: 6
    },
    {
        name: 'con_nguoi_va_xa_hoi',
        title: 'Con ng∆∞·ªùi v√† x√£ h·ªôi',
        description: 'Quan ni·ªám M√°c-x√≠t v·ªÅ b·∫£n ch·∫•t con ng∆∞·ªùi v√† m·ªëi quan h·ªá c√° nh√¢n - x√£ h·ªôi',
        keywords: ['con ng∆∞·ªùi', 'b·∫£n ch·∫•t', 'x√£ h·ªôi', 'c√° nh√¢n', 'quan h·ªá x√£ h·ªôi', 'ho·∫°t ƒë·ªông'],
        suggestedDifficulty: 2,
        suggestedQuestionCount: 10,
        displayOrder: 7
    },
    {
        name: 'y_thuc_xa_hoi',
        title: '√ù th·ª©c x√£ h·ªôi',
        description: 'L√Ω thuy·∫øt v·ªÅ √Ω th·ª©c x√£ h·ªôi, c√°c h√¨nh th√°i √Ω th·ª©c x√£ h·ªôi v√† vai tr√≤ c·ªßa ch√∫ng',
        keywords: ['√Ω th·ª©c', 't·ªìn t·∫°i', 'h√¨nh th√°i', 't∆∞ t∆∞·ªüng', 'vƒÉn h√≥a', 't√¥n gi√°o'],
        suggestedDifficulty: 3,
        suggestedQuestionCount: 10,
        displayOrder: 8
    },
    {
        name: 'giai_cap_va_dau_tranh_giai_cap',
        title: 'Giai c·∫•p v√† ƒë·∫•u tranh giai c·∫•p',
        description: 'L√Ω thuy·∫øt v·ªÅ s·ª± h√¨nh th√†nh giai c·∫•p v√† ƒë·∫•u tranh giai c·∫•p trong x√£ h·ªôi',
        keywords: ['giai c·∫•p', 'ƒë·∫•u tranh', 'v√¥ s·∫£n', 't∆∞ s·∫£n', 'l·ª£i √≠ch', 'm√¢u thu·∫´n'],
        suggestedDifficulty: 3,
        suggestedQuestionCount: 10,
        displayOrder: 9
    },
    {
        name: 'nha_nuoc_va_cach_mang',
        title: 'Nh√† n∆∞·ªõc v√† c√°ch m·∫°ng',
        description: 'Quan ni·ªám v·ªÅ nh√† n∆∞·ªõc, c√°ch m·∫°ng x√£ h·ªôi v√† s·ª± chuy·ªÉn ƒë·ªïi x√£ h·ªôi',
        keywords: ['nh√† n∆∞·ªõc', 'c√°ch m·∫°ng', 'chuy√™n ch√≠nh', 'd√¢n ch·ªß', 'quy·ªÅn l·ª±c', 'ch√≠nh tr·ªã'],
        suggestedDifficulty: 4,
        suggestedQuestionCount: 10,
        displayOrder: 10
    }
];

// H√†m seed d·ªØ li·ªáu
const seedTopics = async () => {
    try {
        console.log('üå± ƒêang seed d·ªØ li·ªáu ch·ªß ƒë·ªÅ tri·∫øt h·ªçc M√°c-L√™-Nin...');

        // T·∫°o admin user gi·∫£ ƒë·ªÉ l√†m createdBy
        const fakeAdminId = new mongoose.Types.ObjectId();

        const created = [];
        const skipped = [];

        for (const topicData of defaultTopics) {
            const existing = await MarxistTopic.findOne({ name: topicData.name });

            if (existing) {
                skipped.push(topicData.name);
                continue;
            }

            const topic = await MarxistTopic.create({
                ...topicData,
                createdBy: fakeAdminId
            });

            created.push(topic.name);
            console.log(`‚úÖ ƒê√£ t·∫°o ch·ªß ƒë·ªÅ: ${topic.title}`);
        }

        console.log('\nüìä K·∫øt qu·∫£ seed:');
        console.log(`‚úÖ ƒê√£ t·∫°o: ${created.length} ch·ªß ƒë·ªÅ`);
        console.log(`‚è≠Ô∏è  B·ªè qua: ${skipped.length} ch·ªß ƒë·ªÅ (ƒë√£ t·ªìn t·∫°i)`);

        if (created.length > 0) {
            console.log('\nüìù Ch·ªß ƒë·ªÅ ƒë√£ t·∫°o:');
            created.forEach((name, index) => {
                const topic = defaultTopics.find(t => t.name === name);
                console.log(`${index + 1}. ${topic.title} (${name})`);
            });
        }

        if (skipped.length > 0) {
            console.log('\nüìù Ch·ªß ƒë·ªÅ b·ªè qua:');
            skipped.forEach((name, index) => {
                const topic = defaultTopics.find(t => t.name === name);
                console.log(`${index + 1}. ${topic.title} (${name})`);
            });
        }

    } catch (error) {
        console.error('‚ùå L·ªói khi seed topics:', error);
        throw error;
    }
};

// Ch·∫°y script
const main = async () => {
    try {
        await connectDB();
        await seedTopics();
        console.log('\nüéâ Ho√†n th√†nh seed d·ªØ li·ªáu tri·∫øt h·ªçc M√°c-L√™-Nin!');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Script th·∫•t b·∫°i:', error);
        process.exit(1);
    }
};

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}

export { seedTopics, defaultTopics };