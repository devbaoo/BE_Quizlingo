import mongoose from 'mongoose';
import MarxistTopic from '../models/marxistTopic.js';
import dotenv from 'dotenv';

dotenv.config();

// K·∫øt n·ªëi database
const connectDB = async () => {
    try {
        const mongoURI = process.env.MONGO_URI || "mongodb://localhost:27017/quizlingo";
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Database connected');
    } catch (error) {
        console.error('‚ùå Database connection error:', error);
        process.exit(1);
    }
};

// D·ªØ li·ªáu ch·ªß ƒë·ªÅ m·∫∑c ƒë·ªãnh
const defaultTopics = [
    {
        name: 'chu_nghia_tu_ban',
        title: 'Ch·ªß nghƒ©a t∆∞ b·∫£n',
        description: 'L√Ω thuy·∫øt v·ªÅ ch·∫ø ƒë·ªô t∆∞ b·∫£n ch·ªß nghƒ©a, m√¢u thu·∫´n c∆° b·∫£n c·ªßa ch·ªß nghƒ©a t∆∞ b·∫£n',
        keywords: ['t∆∞ b·∫£n', 'c√¥ng nh√¢n', 'b√≥c l·ªôt', 'th·∫∑ng d∆∞', 't√≠ch l≈©y', 'kh·ªßng ho·∫£ng kinh t·∫ø'],
        suggestedDifficulty: 2,
        displayOrder: 1
    },
    {
        name: 'gia_tri_thang_du',
        title: 'Gi√° tr·ªã th·∫∑ng d∆∞',
        description: 'H·ªçc thuy·∫øt v·ªÅ gi√° tr·ªã th·∫∑ng d∆∞ - ngu·ªìn g·ªëc l·ª£i nhu·∫≠n c·ªßa nh√† t∆∞ b·∫£n',
        keywords: ['lao ƒë·ªông', 'gi√° tr·ªã s·ª≠ d·ª•ng', 'gi√° tr·ªã trao ƒë·ªïi', 'th·ªùi gian lao ƒë·ªông', 'th·∫∑ng d∆∞ tuy·ªát ƒë·ªëi', 'th·∫∑ng d∆∞ t∆∞∆°ng ƒë·ªëi'],
        suggestedDifficulty: 3,
        displayOrder: 2
    },
    {
        name: 'dau_tranh_giai_cap',
        title: 'ƒê·∫•u tranh giai c·∫•p',
        description: 'L√Ω thuy·∫øt v·ªÅ ƒë·∫•u tranh giai c·∫•p trong x√£ h·ªôi',
        keywords: ['giai c·∫•p', 'v√¥ s·∫£n', 't∆∞ s·∫£n', 'ƒë·∫•u tranh', 'c√°ch m·∫°ng', 'nh√† n∆∞·ªõc'],
        suggestedDifficulty: 2,
        displayOrder: 3
    },
    {
        name: 'cong_hoa_xa_hoi_chu_nghia',
        title: 'C·ªông h√≤a x√£ h·ªôi ch·ªß nghƒ©a',
        description: 'L√Ω thuy·∫øt v·ªÅ nh√† n∆∞·ªõc v√† ch√≠nh tr·ªã trong x√£ h·ªôi x√£ h·ªôi ch·ªß nghƒ©a',
        keywords: ['nh√† n∆∞·ªõc', 'chuy√™n ch√≠nh', 'd√¢n ch·ªß', 'c√¥ng h√≤a', 'x√£ h·ªôi ch·ªß nghƒ©a', 'quy·ªÅn l·ª±c'],
        suggestedDifficulty: 3,
        displayOrder: 4
    },
    {
        name: 'dang_cong_san',
        title: 'ƒê·∫£ng c·ªông s√°n',
        description: 'Vai tr√≤ v√† s·ª© m·ªánh c·ªßa ƒê·∫£ng c·ªông s·∫£n trong c√°ch m·∫°ng',
        keywords: ['ƒë·∫£ng', 'l√£nh ƒë·∫°o', 't·ªï ch·ª©c', 'c∆∞∆°ng lƒ©nh', 'chi·∫øn l∆∞·ª£c', 'chi·∫øn thu·∫≠t'],
        suggestedDifficulty: 2,
        displayOrder: 5
    },
    {
        name: 'cach_mang_vo_san',
        title: 'C√°ch m·∫°ng v√¥ s·∫£n',
        description: 'L√Ω thuy·∫øt v·ªÅ c√°ch m·∫°ng x√£ h·ªôi ch·ªß nghƒ©a',
        keywords: ['c√°ch m·∫°ng', 'v√¥ s·∫£n', 'b·∫°o l·ª±c', 'h√≤a b√¨nh', 'chuy·ªÉn ƒë·ªïi', 'x√£ h·ªôi m·ªõi'],
        suggestedDifficulty: 4,
        displayOrder: 6
    },
    {
        name: 'kinh_te_chinh_tri',
        title: 'Kinh t·∫ø ch√≠nh tr·ªã',
        description: 'Nh·ªØng quy lu·∫≠t kinh t·∫ø c∆° b·∫£n c·ªßa ch·ªß nghƒ©a M√°c',
        keywords: ['s·∫£n xu·∫•t', 'ph√¢n ph·ªëi', 'l∆∞u th√¥ng', 'ti√™u d√πng', 'quan h·ªá s·∫£n xu·∫•t', 'l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t'],
        suggestedDifficulty: 3,
        displayOrder: 7
    },
    {
        name: 'chu_nghia_xa_hoi',
        title: 'Ch·ªß nghƒ©a x√£ h·ªôi',
        description: 'L√Ω thuy·∫øt v·ªÅ x√£ h·ªôi x√£ h·ªôi ch·ªß nghƒ©a v√† c·ªông s·∫£n ch·ªß nghƒ©a',
        keywords: ['x√£ h·ªôi ch·ªß nghƒ©a', 'c·ªông s·∫£n ch·ªß nghƒ©a', 's·ªü h·ªØu chung', 'ph√¢n ph·ªëi', 'lao ƒë·ªông'],
        suggestedDifficulty: 3,
        displayOrder: 8
    },
    {
        name: 'duy_vat_bien_chung',
        title: 'Duy v·∫≠t bi·ªán ch·ª©ng',
        description: 'Ph∆∞∆°ng ph√°p lu·∫≠n M√°c-x√≠t v·ªÅ nh·∫≠n th·ª©c v√† th·ª±c ti·ªÖn',
        keywords: ['m√¢u thu·∫´n', 'ph·ªß ƒë·ªãnh', 'l∆∞·ª£ng ch·∫•t', 'th·ª±c ti·ªÖn', 'nh·∫≠n th·ª©c', 'quy lu·∫≠t'],
        suggestedDifficulty: 4,
        displayOrder: 9
    },
    {
        name: 'duy_vat_lich_su',
        title: 'Duy v·∫≠t l·ªãch s·ª≠',
        description: 'Quan ni·ªám M√°c-x√≠t v·ªÅ s·ª± ph√°t tri·ªÉn c·ªßa x√£ h·ªôi lo√†i ng∆∞·ªùi',
        keywords: ['h√¨nh th√°i kinh t·∫ø x√£ h·ªôi', 'c∆° s·ªü h·∫° t·∫ßng', 'ki·∫øn tr√∫c th∆∞·ª£ng t·∫ßng', '√Ω th·ª©c x√£ h·ªôi', 't·ªìn t·∫°i x√£ h·ªôi'],
        suggestedDifficulty: 5,
        displayOrder: 10
    }
];

// H√†m seed d·ªØ li·ªáu
const seedTopics = async () => {
    try {
        console.log('üå± ƒêang seed d·ªØ li·ªáu ch·ªß ƒë·ªÅ Marxist...');

        // T·∫°o admin user gi·∫£ ƒë·ªÉ l√†m createdBy
        const fakeAdminId = new mongoose.Types.ObjectId();

        const created = [];
        const skipped = [];

        for (const topicData of defaultTopics) {
            const existing = await MarxistTopic.findOne({ name: topicData.name });

            if (existing) {
                skipped.push(topicData.name);
                continue;
            }

            const topic = await MarxistTopic.create({
                ...topicData,
                createdBy: fakeAdminId
            });

            created.push(topic.name);
            console.log(`‚úÖ ƒê√£ t·∫°o ch·ªß ƒë·ªÅ: ${topic.title}`);
        }

        console.log('\nüìä K·∫øt qu·∫£ seed:');
        console.log(`‚úÖ ƒê√£ t·∫°o: ${created.length} ch·ªß ƒë·ªÅ`);
        console.log(`‚è≠Ô∏è  B·ªè qua: ${skipped.length} ch·ªß ƒë·ªÅ (ƒë√£ t·ªìn t·∫°i)`);

        if (created.length > 0) {
            console.log('\nüìù Ch·ªß ƒë·ªÅ ƒë√£ t·∫°o:');
            created.forEach((name, index) => {
                const topic = defaultTopics.find(t => t.name === name);
                console.log(`${index + 1}. ${topic.title} (${name})`);
            });
        }

        if (skipped.length > 0) {
            console.log('\nüìù Ch·ªß ƒë·ªÅ b·ªè qua:');
            skipped.forEach((name, index) => {
                const topic = defaultTopics.find(t => t.name === name);
                console.log(`${index + 1}. ${topic.title} (${name})`);
            });
        }

    } catch (error) {
        console.error('‚ùå L·ªói khi seed topics:', error);
        throw error;
    }
};

// Ch·∫°y script
const main = async () => {
    try {
        await connectDB();
        await seedTopics();
        console.log('\nüéâ Ho√†n th√†nh seed d·ªØ li·ªáu!');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Script th·∫•t b·∫°i:', error);
        process.exit(1);
    }
};

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}

export { seedTopics, defaultTopics }; 